var Typing;
!function(t) {
    t.KeyInfo = class {
    }
    ,
    t.BSKEY_CODE = 8
}(Typing || (Typing = {})),
function(t) {
    t.TMEiji = class {
        constructor() {
            this.TypingMethodName = "TMEiji",
            this.CODE_CHARS_TABLE = {
                32: [" ", " "],
                48: ["0", ""],
                49: ["1", "!"],
                50: ["2", '"'],
                51: ["3", "#"],
                52: ["4", "$"],
                53: ["5", "%"],
                54: ["6", "&"],
                55: ["7", "'"],
                56: ["8", "("],
                57: ["9", ")"],
                59: [":", "*"],
                65: ["a", "A"],
                66: ["b", "B"],
                67: ["c", "C"],
                68: ["d", "D"],
                69: ["e", "E"],
                70: ["f", "F"],
                71: ["g", "G"],
                72: ["h", "H"],
                73: ["i", "I"],
                74: ["j", "J"],
                75: ["k", "K"],
                76: ["l", "L"],
                77: ["m", "M"],
                78: ["n", "N"],
                79: ["o", "O"],
                80: ["p", "P"],
                81: ["q", "Q"],
                82: ["r", "R"],
                83: ["s", "S"],
                84: ["t", "T"],
                85: ["u", "U"],
                86: ["v", "V"],
                87: ["w", "W"],
                88: ["x", "X"],
                89: ["y", "Y"],
                90: ["z", "Z"],
                96: ["0", ""],
                97: ["1", ""],
                98: ["2", ""],
                99: ["3", ""],
                100: ["4", ""],
                101: ["5", ""],
                102: ["6", ""],
                103: ["7", ""],
                104: ["8", ""],
                105: ["9", ""],
                106: ["*", ""],
                107: ["+", ""],
                109: ["-", ""],
                110: [".", ""],
                111: ["/", ""],
                186: [":", "*"],
                187: [";", "+"],
                188: [",", "<"],
                189: ["-", "="],
                190: [".", ">"],
                191: ["/", "?"],
                192: ["@", "`"],
                219: ["[", "{"],
                220: ["\\", "|"],
                221: ["]", "}"],
                222: ["^", "~"],
                226: ["\\", "_"]
            },
            this.CHARS_CODE_TABLE = {
                0: "48",
                1: "49",
                2: "50",
                3: "51",
                4: "52",
                5: "53",
                6: "54",
                7: "55",
                8: "56",
                9: "57",
                " ": "32",
                ":": "186",
                a: "65",
                b: "66",
                c: "67",
                d: "68",
                e: "69",
                f: "70",
                g: "71",
                h: "72",
                i: "73",
                j: "74",
                k: "75",
                l: "76",
                m: "77",
                n: "78",
                o: "79",
                p: "80",
                q: "81",
                r: "82",
                s: "83",
                t: "84",
                u: "85",
                v: "86",
                w: "87",
                x: "88",
                y: "89",
                z: "90",
                ";": "187",
                ",": "188",
                "-": "189",
                ".": "190",
                "/": "191",
                "@": "192",
                "[": "219",
                "]": "221",
                "^": "222",
                "\\": "226"
            },
            this.SHIFT_CHARS_CODE_TABLE = {
                " ": "32",
                "": "111",
                "!": "49",
                '"': "50",
                "#": "51",
                $: "52",
                "%": "53",
                "&": "54",
                "'": "55",
                "(": "56",
                ")": "57",
                "*": "186",
                A: "65",
                B: "66",
                C: "67",
                D: "68",
                E: "69",
                F: "70",
                G: "71",
                H: "72",
                I: "73",
                J: "74",
                K: "75",
                L: "76",
                M: "77",
                N: "78",
                O: "79",
                P: "80",
                Q: "81",
                R: "82",
                S: "83",
                T: "84",
                U: "85",
                V: "86",
                W: "87",
                X: "88",
                Y: "89",
                Z: "90",
                "+": "187",
                "<": "188",
                "=": "189",
                ">": "190",
                "?": "191",
                "`": "192",
                "{": "219",
                "|": "220",
                "}": "221",
                "~": "222",
                _: "226"
            },
            this.REV_CODE_TABLE = {},
            this.SHIFT_REV_CODE_TABLE = {},
            this.CHAR_PATTERN_TABLE = {
                " ": [" "],
                0: ["0"],
                1: ["1"],
                2: ["2"],
                3: ["3"],
                4: ["4"],
                5: ["5"],
                6: ["6"],
                7: ["7"],
                8: ["8"],
                9: ["9"],
                ":": [":"],
                A: ["A", "a"],
                B: ["B", "b"],
                C: ["C", "c"],
                D: ["D", "d"],
                E: ["E", "e"],
                F: ["F", "f"],
                G: ["G", "g"],
                H: ["H", "h"],
                I: ["I", "i"],
                J: ["J", "j"],
                K: ["K", "k"],
                L: ["L", "l"],
                M: ["M", "m"],
                N: ["N", "n"],
                O: ["O", "o"],
                P: ["P", "p"],
                Q: ["Q", "q"],
                R: ["R", "r"],
                S: ["S", "s"],
                T: ["T", "t"],
                U: ["U", "u"],
                V: ["V", "v"],
                W: ["W", "w"],
                X: ["X", "x"],
                Y: ["Y", "y"],
                Z: ["Z", "z"],
                a: ["A", "a"],
                b: ["B", "b"],
                c: ["C", "c"],
                d: ["D", "d"],
                e: ["E", "e"],
                f: ["F", "f"],
                g: ["G", "g"],
                h: ["H", "h"],
                i: ["I", "i"],
                j: ["J", "j"],
                k: ["K", "k"],
                l: ["L", "l"],
                m: ["M", "m"],
                n: ["N", "n"],
                o: ["O", "o"],
                p: ["P", "p"],
                q: ["Q", "q"],
                r: ["R", "r"],
                s: ["S", "s"],
                t: ["T", "t"],
                u: ["U", "u"],
                v: ["V", "v"],
                w: ["W", "w"],
                x: ["X", "x"],
                y: ["Y", "y"],
                z: ["Z", "z"],
                "*": ["*"],
                "+": ["+"],
                "-": ["-"],
                ".": ["."],
                "/": ["/"],
                ";": [";"],
                ",": [","],
                "@": ["@"],
                "[": ["["],
                "\\": ["\\"],
                "]": ["]"],
                "^": ["^"],
                "!": ["!"],
                '"': ['"'],
                "#": ["#"],
                $: ["$"],
                "%": ["%"],
                "&": ["&"],
                "'": ["'"],
                "(": ["("],
                ")": [")"],
                "<": ["<"],
                "=": ["="],
                ">": [">"],
                "?": ["?"],
                "`": ["`"],
                "{": ["{"],
                "|": ["|"],
                "}": ["}"],
                "~": ["~"],
                _: ["_"]
            },
            this.REV_CODE_TABLE = this.CHARS_CODE_TABLE,
            this.SHIFT_REV_CODE_TABLE = this.SHIFT_CHARS_CODE_TABLE
        }
        isUndoCode(t) {
            return !1
        }
        canUndoChar(t, s) {
            return !1
        }
        charToKeyInfo(s) {
            var e = null
              , n = !1;
            if (!(e = this.REV_CODE_TABLE[s])) {
                if (!(e = this.SHIFT_REV_CODE_TABLE[s]))
                    return null;
                n = !0
            }
            var r = new t.KeyInfo;
            return r.code = e,
            r.chara = s,
            r.shifted = n,
            r
        }
        codeToKeyInfo(s, e, n) {
            var r = new t.KeyInfo;
            return r.code = s,
            this.CODE_CHARS_TABLE[s] ? r.chara = this.CODE_CHARS_TABLE[s][e ? 1 : 0] : r.chara = null,
            r.shifted = e,
            r.location = n,
            r
        }
        getAnswers(t, s) {
            for (var e = [], n = 0; n < t.typingchar.length; n++) {
                var r, i = t.typingchar.charAt(n);
                s.smallBigLetter ? ((r = []).push(i),
                e.push(r.concat())) : this.CHAR_PATTERN_TABLE[i.toUpperCase()] ? e.push(this.CHAR_PATTERN_TABLE[i.toUpperCase()].concat()) : ((r = []).push(i),
                e.push(r.concat()))
            }
            return e
        }
        getInputCharNum(t) {
            return t.length
        }
        isReturnAnswerStrings() {
            return !0
        }
        checkQuestionData(t) {
            for (var s = 0; s < t.typingchar.length; s++) {
                var e = t.typingchar.charAt(s);
                if (!this.CHAR_PATTERN_TABLE[e])
                    return alert("問題データの" + s + "番目にエラーあり"),
                    !1
            }
            return !0
        }
    }
}(Typing || (Typing = {})),
function(t) {
    t.TMKana = class {
        constructor() {
            for (var t in this.TypingMethodName = "TMKana",
            this.CODE_CHARS_TABLE = {
                32: ["　", "　"],
                48: ["わ", "を"],
                49: ["ぬ", "ぬ"],
                50: ["ふ", "ふ"],
                51: ["あ", "ぁ"],
                52: ["う", "ぅ"],
                53: ["え", "ぇ"],
                54: ["お", "ぉ"],
                55: ["や", "ゃ"],
                56: ["ゆ", "ゅ"],
                57: ["よ", "ょ"],
                59: ["け", "け"],
                65: ["ち", "ち"],
                66: ["こ", "こ"],
                67: ["そ", "そ"],
                68: ["し", "し"],
                69: ["い", "ぃ"],
                70: ["は", "は"],
                71: ["き", "き"],
                72: ["く", "く"],
                73: ["に", "に"],
                74: ["ま", "ま"],
                75: ["の", "の"],
                76: ["り", "り"],
                77: ["も", "も"],
                78: ["み", "み"],
                79: ["ら", "ら"],
                80: ["せ", "せ"],
                81: ["た", "た"],
                82: ["す", "す"],
                83: ["と", "と"],
                84: ["か", "か"],
                85: ["な", "な"],
                86: ["ひ", "ひ"],
                87: ["て", "て"],
                88: ["さ", "さ"],
                89: ["ん", "ん"],
                90: ["つ", "っ"],
                96: ["0", ""],
                97: ["1", ""],
                98: ["2", ""],
                99: ["3", ""],
                100: ["4", ""],
                101: ["5", ""],
                102: ["6", ""],
                103: ["7", ""],
                104: ["8", ""],
                105: ["9", ""],
                106: ["*", ""],
                107: ["+", ""],
                109: ["-", ""],
                110: [".", ""],
                111: ["/", ""],
                186: ["け", "け"],
                187: ["れ", "れ"],
                188: ["ね", "、"],
                189: ["ほ", "ほ"],
                190: ["る", "。"],
                191: ["め", "・"],
                192: ["゛", "゛"],
                219: ["゜", "「"],
                220: ["ー", "ー"],
                221: ["む", "」"],
                222: ["へ", "へ"],
                226: ["ろ", "ろ"]
            },
            this.REV_CODE_TABLE = {},
            this.SHIFT_REV_CODE_TABLE = {},
            this.CHAR_PATTERN_TABLE = {
                "゛": ["゛"],
                "゜": ["゜"],
                "あ": ["あ"],
                "い": ["い"],
                "う": ["う"],
                "え": ["え"],
                "お": ["お"],
                "か": ["か"],
                "き": ["き"],
                "く": ["く"],
                "け": ["け"],
                "こ": ["こ"],
                "さ": ["さ"],
                "し": ["し"],
                "す": ["す"],
                "せ": ["せ"],
                "そ": ["そ"],
                "た": ["た"],
                "ち": ["ち"],
                "つ": ["つ"],
                "て": ["て"],
                "と": ["と"],
                "な": ["な"],
                "に": ["に"],
                "ぬ": ["ぬ"],
                "ね": ["ね"],
                "の": ["の"],
                "は": ["は"],
                "ひ": ["ひ"],
                "ふ": ["ふ"],
                "へ": ["へ"],
                "ほ": ["ほ"],
                "ま": ["ま"],
                "み": ["み"],
                "む": ["む"],
                "め": ["め"],
                "も": ["も"],
                "や": ["や"],
                "ゆ": ["ゆ"],
                "よ": ["よ"],
                "ら": ["ら"],
                "り": ["り"],
                "る": ["る"],
                "れ": ["れ"],
                "ろ": ["ろ"],
                "わ": ["わ"],
                "を": ["を"],
                "ん": ["ん"],
                "ぁ": ["ぁ"],
                "ぃ": ["ぃ"],
                "ぅ": ["ぅ"],
                "ぇ": ["ぇ"],
                "ぉ": ["ぉ"],
                "ゃ": ["ゃ"],
                "ゅ": ["ゅ"],
                "ょ": ["ょ"],
                "っ": ["っ"],
                "が": ["か゛"],
                "ぎ": ["き゛"],
                "ぐ": ["く゛"],
                "げ": ["け゛"],
                "ご": ["こ゛"],
                "ざ": ["さ゛"],
                "じ": ["し゛"],
                "ず": ["す゛"],
                "ぜ": ["せ゛"],
                "ぞ": ["そ゛"],
                "だ": ["た゛"],
                "ぢ": ["ち゛"],
                "づ": ["つ゛"],
                "で": ["て゛"],
                "ど": ["と゛"],
                "ば": ["は゛"],
                "び": ["ひ゛"],
                "ぶ": ["ふ゛"],
                "べ": ["へ゛"],
                "ぼ": ["ほ゛"],
                "ぱ": ["は゜"],
                "ぴ": ["ひ゜"],
                "ぷ": ["ふ゜"],
                "ぺ": ["へ゜"],
                "ぽ": ["ほ゜"],
                "。": ["。"],
                "、": ["、"],
                "ー": ["ー"],
                "「": ["「"],
                "」": ["」"],
                "＊": ["*"],
                "＋": ["+"],
                "－": ["-"],
                "．": ["."],
                "／": ["/"],
                "０": ["0"],
                "１": ["1"],
                "２": ["2"],
                "３": ["3"],
                "４": ["4"],
                "５": ["5"],
                "６": ["6"],
                "７": ["7"],
                "８": ["8"],
                "９": ["9"],
                "ゎ": ["わ"],
                "ヴ": ["う゛"],
                "ヵ": ["か"],
                "ヶ": ["け"],
                "ア": ["あ"],
                "イ": ["い"],
                "ウ": ["う"],
                "エ": ["え"],
                "オ": ["お"],
                "カ": ["か"],
                "キ": ["き"],
                "ク": ["く"],
                "ケ": ["け"],
                "コ": ["こ"],
                "サ": ["さ"],
                "シ": ["し"],
                "ス": ["す"],
                "セ": ["せ"],
                "ソ": ["そ"],
                "タ": ["た"],
                "チ": ["ち"],
                "ツ": ["つ"],
                "テ": ["て"],
                "ト": ["と"],
                "ナ": ["な"],
                "ニ": ["に"],
                "ヌ": ["ぬ"],
                "ネ": ["ね"],
                "ノ": ["の"],
                "ハ": ["は"],
                "ヒ": ["ひ"],
                "フ": ["ふ"],
                "ヘ": ["へ"],
                "ホ": ["ほ"],
                "マ": ["ま"],
                "ミ": ["み"],
                "ム": ["む"],
                "メ": ["め"],
                "モ": ["も"],
                "ヤ": ["や"],
                "ユ": ["ゆ"],
                "ヨ": ["よ"],
                "ラ": ["ら"],
                "リ": ["り"],
                "ル": ["る"],
                "レ": ["れ"],
                "ロ": ["ろ"],
                "ワ": ["わ"],
                "ヲ": ["を"],
                "ン": ["ん"],
                "ァ": ["ぁ"],
                "ィ": ["ぃ"],
                "ゥ": ["ぅ"],
                "ェ": ["ぇ"],
                "ォ": ["ぉ"],
                "ャ": ["ゃ"],
                "ュ": ["ゅ"],
                "ョ": ["ょ"],
                "ッ": ["っ"],
                "ガ": ["か゛"],
                "ギ": ["き゛"],
                "グ": ["く゛"],
                "ゲ": ["け゛"],
                "ゴ": ["こ゛"],
                "ザ": ["さ゛"],
                "ジ": ["し゛"],
                "ズ": ["す゛"],
                "ゼ": ["せ゛"],
                "ゾ": ["そ゛"],
                "ダ": ["た゛"],
                "ヂ": ["ち゛"],
                "ヅ": ["つ゛"],
                "デ": ["て゛"],
                "ド": ["と゛"],
                "バ": ["は゛"],
                "ビ": ["ひ゛"],
                "ブ": ["ふ゛"],
                "ベ": ["へ゛"],
                "ボ": ["ほ゛"],
                "パ": ["は゜"],
                "ピ": ["ひ゜"],
                "プ": ["ふ゜"],
                "ペ": ["へ゜"],
                "ポ": ["ほ゜"],
                "ヮ": ["わ"]
            },
            this.CODE_CHARS_TABLE)
                this.REV_CODE_TABLE[this.CODE_CHARS_TABLE[t][0]] = t,
                this.SHIFT_REV_CODE_TABLE[this.CODE_CHARS_TABLE[t][1]] = t
        }
        isUndoCode(t) {
            return !1
        }
        canUndoChar(t, s) {
            return !1
        }
        charToKeyInfo(s) {
            var e = null
              , n = !1;
            if (!(e = this.REV_CODE_TABLE[s])) {
                if (!(e = this.SHIFT_REV_CODE_TABLE[s]))
                    return null;
                n = !0
            }
            var r = new t.KeyInfo;
            return r.code = e,
            r.chara = s,
            r.shifted = n,
            r
        }
        codeToKeyInfo(s, e, n) {
            var r = new t.KeyInfo;
            return r.code = s,
            this.CODE_CHARS_TABLE[s] ? r.chara = this.CODE_CHARS_TABLE[s][e ? 1 : 0] : r.chara = null,
            r.shifted = e,
            r.location = n,
            r
        }
        getAnswers(t, s) {
            for (var e = [], n = 0; n < t.typingchar.length; n++) {
                var r = t.typingchar.charAt(n);
                if (this.CHAR_PATTERN_TABLE[r])
                    e.push(this.CHAR_PATTERN_TABLE[r].concat());
                else {
                    var i = [];
                    i.push(r),
                    e.push(i)
                }
            }
            return e
        }
        getInputCharNum(t) {
            for (var s, e = 0, n = 0; n < t.length; n++)
                "゛" != (s = t.substring(n, n + 1)) && "゜" != s && e++;
            return e
        }
        isReturnAnswerStrings() {
            return !1
        }
        checkQuestionData(t) {
            for (var s = 0; s < t.typingchar.length; s++) {
                var e = t.typingchar.charAt(s);
                if (!this.CHAR_PATTERN_TABLE[e])
                    return alert("問題データの" + s + "番目にエラーあり"),
                    !1
            }
            return !0
        }
    }
}(Typing || (Typing = {})),
function(t) {
    t.TMRoman = class {
        constructor() {
            for (var t in this.TypingMethodName = "TMRoman",
            this.alphabetToKanaNum = {},
            this.CODE_CHARS_TABLE = {
                32: [" ", " "],
                48: ["0", ""],
                49: ["1", "!"],
                50: ["2", '"'],
                51: ["3", "#"],
                52: ["4", "$"],
                53: ["5", "%"],
                54: ["6", "&"],
                55: ["7", "'"],
                56: ["8", "("],
                57: ["9", ")"],
                59: [":", "*"],
                65: ["A", "A"],
                66: ["B", "B"],
                67: ["C", "C"],
                68: ["D", "D"],
                69: ["E", "E"],
                70: ["F", "F"],
                71: ["G", "G"],
                72: ["H", "H"],
                73: ["I", "I"],
                74: ["J", "J"],
                75: ["K", "K"],
                76: ["L", "L"],
                77: ["M", "M"],
                78: ["N", "N"],
                79: ["O", "O"],
                80: ["P", "P"],
                81: ["Q", "Q"],
                82: ["R", "R"],
                83: ["S", "S"],
                84: ["T", "T"],
                85: ["U", "U"],
                86: ["V", "V"],
                87: ["W", "W"],
                88: ["X", "X"],
                89: ["Y", "Y"],
                90: ["Z", "Z"],
                96: ["0", ""],
                97: ["1", ""],
                98: ["2", ""],
                99: ["3", ""],
                100: ["4", ""],
                101: ["5", ""],
                102: ["6", ""],
                103: ["7", ""],
                104: ["8", ""],
                105: ["9", ""],
                106: ["*", ""],
                107: ["+", ""],
                109: ["-", ""],
                110: [".", ""],
                111: ["/", ""],
                186: [":", "*"],
                187: [";", "+"],
                188: [",", "<"],
                189: ["-", "="],
                190: [".", ">"],
                191: ["/", "?"],
                192: ["@", "`"],
                219: ["[", "{"],
                220: ["\\", "|"],
                221: ["]", "}"],
                222: ["^", "~"],
                226: ["\\", "_"]
            },
            this.CHARS_CODE_TABLE = {
                0: "48",
                1: "49",
                2: "50",
                3: "51",
                4: "52",
                5: "53",
                6: "54",
                7: "55",
                8: "56",
                9: "57",
                " ": "32",
                ":": "59",
                A: "65",
                B: "66",
                C: "67",
                D: "68",
                E: "69",
                F: "70",
                G: "71",
                H: "72",
                I: "73",
                J: "74",
                K: "75",
                L: "76",
                M: "77",
                N: "78",
                O: "79",
                P: "80",
                Q: "81",
                R: "82",
                S: "83",
                T: "84",
                U: "85",
                V: "86",
                W: "87",
                X: "88",
                Y: "89",
                Z: "90",
                ";": "187",
                ",": "188",
                "-": "189",
                ".": "190",
                "/": "191",
                "@": "192",
                "[": "219",
                "]": "221",
                "^": "222",
                "\\": "226"
            },
            this.SHIFT_CHARS_CODE_TABLE = {
                " ": "32",
                "": "111",
                "!": "49",
                '"': "50",
                "#": "51",
                $: "52",
                "%": "53",
                "&": "54",
                "'": "55",
                "(": "56",
                ")": "57",
                "*": "186",
                A: "65",
                B: "66",
                C: "67",
                D: "68",
                E: "69",
                F: "70",
                G: "71",
                H: "72",
                I: "73",
                J: "74",
                K: "75",
                L: "76",
                M: "77",
                N: "78",
                O: "79",
                P: "80",
                Q: "81",
                R: "82",
                S: "83",
                T: "84",
                U: "85",
                V: "86",
                W: "87",
                X: "88",
                Y: "89",
                Z: "90",
                "+": "187",
                "<": "188",
                "=": "189",
                ">": "190",
                "?": "191",
                "`": "192",
                "{": "219",
                "|": "220",
                "}": "221",
                "~": "222",
                _: "226"
            },
            this.REV_CODE_TABLE = {},
            this.SHIFT_REV_CODE_TABLE = {},
            this.CHAR_PATTERN_TABLE = {
                "あ": ["A"],
                "い": ["I", "YI"],
                "う": ["U", "WU", "WHU"],
                "え": ["E"],
                "お": ["O"],
                "か": ["KA", "CA"],
                "き": ["KI"],
                "く": ["KU", "CU", "QU"],
                "け": ["KE"],
                "こ": ["KO", "CO"],
                "さ": ["SA"],
                "し": ["SI", "CI", "SHI"],
                "す": ["SU"],
                "せ": ["SE", "CE"],
                "そ": ["SO"],
                "た": ["TA"],
                "ち": ["TI", "CHI"],
                "つ": ["TU", "TSU"],
                "て": ["TE"],
                "と": ["TO"],
                "な": ["NA"],
                "に": ["NI"],
                "ぬ": ["NU"],
                "ね": ["NE"],
                "の": ["NO"],
                "は": ["HA"],
                "ひ": ["HI"],
                "ふ": ["HU", "FU"],
                "へ": ["HE"],
                "ほ": ["HO"],
                "ま": ["MA"],
                "み": ["MI"],
                "む": ["MU"],
                "め": ["ME"],
                "も": ["MO"],
                "や": ["YA"],
                "ゆ": ["YU"],
                "よ": ["YO"],
                "ら": ["RA"],
                "り": ["RI"],
                "る": ["RU"],
                "れ": ["RE"],
                "ろ": ["RO"],
                "わ": ["WA"],
                "を": ["WO"],
                "ん": ["NN", "N"],
                "ぁ": ["LA", "XA"],
                "ぃ": ["LI", "LYI", "XI", "XYI"],
                "ぅ": ["LU", "XU"],
                "ぇ": ["LE", "LYE", "XE", "XYE"],
                "ぉ": ["LO", "XO"],
                "ゃ": ["LYA", "XYA"],
                "ゅ": ["LYU", "XYU"],
                "ょ": ["LYO", "XYO"],
                "っ": ["LTU", "LTSU", "XTU"],
                "うぃ": ["WI", "WHI"],
                "うぇ": ["WE", "WHE"],
                "くぁ": ["QA", "QWA", "KWA"],
                "くぃ": ["QI", "QWI", "QYI"],
                "くぇ": ["QE", "QWE", "QYE"],
                "くぉ": ["QO", "QWO"],
                "しゃ": ["SHA", "SYA"],
                "しゅ": ["SHU", "SYU"],
                "しぇ": ["SHE", "SYE"],
                "しょ": ["SHO", "SYO"],
                "じゃ": ["JA", "JYA", "ZYA"],
                "じゅ": ["JU", "JYU", "ZYU"],
                "じぇ": ["JE", "JYE", "ZYE"],
                "じょ": ["JO", "JYO", "ZYO"],
                "ちゃ": ["CHA", "CYA", "TYA"],
                "ちぃ": ["CHI", "TYI"],
                "ちゅ": ["CHU", "CYU", "TYU"],
                "ちぇ": ["CHE", "CYE", "TYE"],
                "ちょ": ["CHO", "CYO", "TYO"],
                "ふぁ": ["FA", "FWA"],
                "ふぃ": ["FI", "FYI", "FWI"],
                "ふぇ": ["FE", "FYE", "FWE"],
                "ふぉ": ["FO", "FWO"],
                "が": ["GA"],
                "ぎ": ["GI"],
                "ぐ": ["GU"],
                "げ": ["GE"],
                "ご": ["GO"],
                "ざ": ["ZA"],
                "じ": ["ZI", "JI"],
                "ず": ["ZU"],
                "ぜ": ["ZE"],
                "ぞ": ["ZO"],
                "だ": ["DA"],
                "ぢ": ["DI"],
                "づ": ["DU"],
                "で": ["DE"],
                "ど": ["DO"],
                "ば": ["BA"],
                "び": ["BI"],
                "ぶ": ["BU"],
                "べ": ["BE"],
                "ぼ": ["BO"],
                "ぱ": ["PA"],
                "ぴ": ["PI"],
                "ぷ": ["PU"],
                "ぺ": ["PE"],
                "ぽ": ["PO"],
                "。": ["."],
                "、": [","],
                "ー": ["-"],
                "きゃ": ["KYA"],
                "きゅ": ["KYU"],
                "きょ": ["KYO"],
                "ぎゃ": ["GYA"],
                "ぎゅ": ["GYU"],
                "ぎょ": ["GYO"],
                "にゃ": ["NYA"],
                "にゅ": ["NYU"],
                "にょ": ["NYO"],
                "ひゃ": ["HYA"],
                "ひゅ": ["HYU"],
                "ひょ": ["HYO"],
                "びゃ": ["BYA"],
                "びゅ": ["BYU"],
                "びょ": ["BYO"],
                "ぴゃ": ["PYA"],
                "ぴゅ": ["PYU"],
                "ぴょ": ["PYO"],
                "みゃ": ["MYA"],
                "みゅ": ["MYU"],
                "みょ": ["MYO"],
                "りゃ": ["RYA"],
                "りゅ": ["RYU"],
                "りょ": ["RYO"],
                "「": ["["],
                "」": ["]"],
                "＊": ["*"],
                "＋": ["+"],
                "－": ["-"],
                "．": ["."],
                "／": ["/"],
                "０": ["0"],
                "１": ["1"],
                "２": ["2"],
                "３": ["3"],
                "４": ["4"],
                "５": ["5"],
                "６": ["6"],
                "７": ["7"],
                "８": ["8"],
                "９": ["9"],
                "いぇ": ["YE"],
                "うぁ": ["WHA"],
                "うぉ": ["WHO", "UXO"],
                "きぃ": ["KYI"],
                "きぇ": ["KYE"],
                "ぎぃ": ["GYI"],
                "ぎぇ": ["GYE"],
                "くぅ": ["QWU"],
                "くゃ": ["QYA"],
                "くゅ": ["QYU"],
                "くょ": ["QYO"],
                "ぐぁ": ["GWA"],
                "ぐぃ": ["GWI"],
                "ぐぅ": ["GWU"],
                "ぐぇ": ["GWE"],
                "ぐぉ": ["GWO"],
                "しぃ": ["SYI"],
                "じぃ": ["JYI", "ZYI"],
                "すぁ": ["SWA"],
                "すぃ": ["SWI"],
                "すぅ": ["SWU"],
                "すぇ": ["SWE"],
                "すぉ": ["SWO"],
                "ぢぃ": ["DYI"],
                "ぢぇ": ["DYE"],
                "ぢゃ": ["DYA"],
                "ぢゅ": ["DYU"],
                "ぢょ": ["DYO"],
                "つぁ": ["TSA"],
                "つぃ": ["TSI"],
                "つぇ": ["TSE"],
                "つぉ": ["TSO"],
                "てぃ": ["THI"],
                "てぇ": ["THE"],
                "てゃ": ["THA"],
                "てゅ": ["THU"],
                "てょ": ["THO"],
                "でぃ": ["DHI", "DEXI"],
                "でぇ": ["DHE"],
                "でゃ": ["DHA"],
                "でゅ": ["DHU"],
                "でょ": ["DHO"],
                "とぁ": ["TWA"],
                "とぃ": ["TWI"],
                "とぅ": ["TWU"],
                "とぇ": ["TWE"],
                "とぉ": ["TWO"],
                "どぁ": ["DWA"],
                "どぃ": ["DWI"],
                "どぅ": ["DWU"],
                "どぇ": ["DWE"],
                "どぉ": ["DWO"],
                "にぃ": ["NYI"],
                "にぇ": ["NYE"],
                "ひぃ": ["HYI"],
                "ひぇ": ["HYE"],
                "びぃ": ["BYI"],
                "びぇ": ["BYE"],
                "ぴぃ": ["PYI"],
                "ぴぇ": ["PYE"],
                "ふぅ": ["FWU"],
                "ふゃ": ["FYA"],
                "ふゅ": ["FYU"],
                "ふょ": ["FYO"],
                "みぃ": ["MYI"],
                "みぇ": ["MYE"],
                "りぃ": ["RYI"],
                "りぇ": ["RYE"],
                "ゎ": ["LWA", "XWA"],
                "ヴぁ": ["VA"],
                "ヴぃ": ["VI", "VYI"],
                "ヴぇ": ["VE", "VYE"],
                "ヴぉ": ["VO"],
                "ヴゃ": ["VYA"],
                "ヴゅ": ["VYU"],
                "ヴょ": ["VYO"],
                "ヴ": ["VU"],
                "ヵ": ["LKA", "XKA"],
                "ヶ": ["LKE", "XKE"],
                "ア": ["A"],
                "イ": ["I", "YI"],
                "ウ": ["U", "WU", "WHU"],
                "エ": ["E"],
                "オ": ["O"],
                "カ": ["KA", "CA"],
                "キ": ["KI"],
                "ク": ["KU", "CU", "QU"],
                "ケ": ["KE"],
                "コ": ["KO", "CO"],
                "サ": ["SA"],
                "シ": ["SI", "CI", "SHI"],
                "ス": ["SU"],
                "セ": ["SE", "CE"],
                "ソ": ["SO"],
                "タ": ["TA"],
                "チ": ["TI", "CHI"],
                "ツ": ["TU", "TSU"],
                "テ": ["TE"],
                "ト": ["TO"],
                "ナ": ["NA"],
                "ニ": ["NI"],
                "ヌ": ["NU"],
                "ネ": ["NE"],
                "ノ": ["NO"],
                "ハ": ["HA"],
                "ヒ": ["HI"],
                "フ": ["HU", "FU"],
                "ヘ": ["HE"],
                "ホ": ["HO"],
                "マ": ["MA"],
                "ミ": ["MI"],
                "ム": ["MU"],
                "メ": ["ME"],
                "モ": ["MO"],
                "ヤ": ["YA"],
                "ユ": ["YU"],
                "ヨ": ["YO"],
                "ラ": ["RA"],
                "リ": ["RI"],
                "ル": ["RU"],
                "レ": ["RE"],
                "ロ": ["RO"],
                "ワ": ["WA"],
                "ヲ": ["WO"],
                "ン": ["NN", "N"],
                "ァ": ["LA", "XA"],
                "ィ": ["LI", "LYI", "XI", "XYI"],
                "ゥ": ["LU", "XU"],
                "ェ": ["LE", "LYE", "XE", "XYE"],
                "ォ": ["LO", "XO"],
                "ャ": ["LYA", "XYA"],
                "ュ": ["LYU", "XYU"],
                "ョ": ["LYO", "XYO"],
                "ッ": ["LTU", "LTSU", "XTU"],
                "ウィ": ["WI", "WHI"],
                "ウェ": ["WE", "WHE"],
                "クァ": ["QA", "QWA", "KWA"],
                "クィ": ["QI", "QWI", "QYI"],
                "クェ": ["QE", "QWE", "QYE"],
                "クォ": ["QO", "QWO"],
                "シャ": ["SHA", "SYA"],
                "シュ": ["SHU", "SYU"],
                "シェ": ["SHE", "SYE"],
                "ショ": ["SHO", "SYO"],
                "ジャ": ["JA", "JYA", "ZYA"],
                "ジュ": ["JU", "JYU", "ZYU"],
                "ジェ": ["JE", "JYE", "ZYE"],
                "ジョ": ["JO", "JYO", "ZYO"],
                "チャ": ["CHA", "CYA", "TYA"],
                "チィ": ["CHI", "TYI"],
                "チュ": ["CHU", "CYU", "TYU"],
                "チェ": ["CHE", "CYE", "TYE"],
                "チョ": ["CHO", "CYO", "TYO"],
                "ファ": ["FA", "FWA"],
                "フィ": ["FI", "FYI", "FWI"],
                "フェ": ["FE", "FYE", "FWE"],
                "フォ": ["FO", "FWO"],
                "ガ": ["GA"],
                "ギ": ["GI"],
                "グ": ["GU"],
                "ゲ": ["GE"],
                "ゴ": ["GO"],
                "ザ": ["ZA"],
                "ジ": ["ZI", "JI"],
                "ズ": ["ZU"],
                "ゼ": ["ZE"],
                "ゾ": ["ZO"],
                "ダ": ["DA"],
                "ヂ": ["DI"],
                "ヅ": ["DU"],
                "デ": ["DE"],
                "ド": ["DO"],
                "バ": ["BA"],
                "ビ": ["BI"],
                "ブ": ["BU"],
                "ベ": ["BE"],
                "ボ": ["BO"],
                "パ": ["PA"],
                "ピ": ["PI"],
                "プ": ["PU"],
                "ペ": ["PE"],
                "ポ": ["PO"],
                "キャ": ["KYA"],
                "キュ": ["KYU"],
                "キョ": ["KYO"],
                "ギャ": ["GYA"],
                "ギュ": ["GYU"],
                "ギョ": ["GYO"],
                "ニャ": ["NYA"],
                "ニュ": ["NYU"],
                "ニョ": ["NYO"],
                "ヒャ": ["HYA"],
                "ヒュ": ["HYU"],
                "ヒョ": ["HYO"],
                "ビャ": ["BYA"],
                "ビュ": ["BYU"],
                "ビョ": ["BYO"],
                "ピャ": ["PYA"],
                "ピュ": ["PYU"],
                "ピョ": ["PYO"],
                "ミャ": ["MYA"],
                "ミュ": ["MYU"],
                "ミョ": ["MYO"],
                "リャ": ["RYA"],
                "リュ": ["RYU"],
                "リョ": ["RYO"],
                "イェ": ["YE"],
                "ウァ": ["WHA"],
                "ウォ": ["WHO", "UXO"],
                "キィ": ["KYI"],
                "キェ": ["KYE"],
                "ギィ": ["GYI"],
                "ギェ": ["GYE"],
                "クゥ": ["QWU"],
                "クャ": ["QYA"],
                "クュ": ["QYU"],
                "クョ": ["QYO"],
                "グァ": ["GWA"],
                "グィ": ["GWI"],
                "グゥ": ["GWU"],
                "グェ": ["GWE"],
                "グォ": ["GWO"],
                "シィ": ["SYI"],
                "ジィ": ["JYI", "ZYI"],
                "スァ": ["SWA"],
                "スィ": ["SWI"],
                "スゥ": ["SWU"],
                "スェ": ["SWE"],
                "スォ": ["SWO"],
                "ヂィ": ["DYI"],
                "ヂェ": ["DYE"],
                "ヂャ": ["DYA"],
                "ヂュ": ["DYU"],
                "ヂョ": ["DYO"],
                "ツァ": ["TSA"],
                "ツィ": ["TSI"],
                "ツェ": ["TSE"],
                "ツォ": ["TSO"],
                "ティ": ["THI"],
                "テェ": ["THE"],
                "テャ": ["THA"],
                "テュ": ["THU"],
                "テョ": ["THO"],
                "ディ": ["DHI", "DEXI"],
                "デェ": ["DHE"],
                "デャ": ["DHA"],
                "デュ": ["DHU"],
                "デョ": ["DHO"],
                "トァ": ["TWA"],
                "トィ": ["TWI"],
                "トゥ": ["TWU"],
                "トェ": ["TWE"],
                "トォ": ["TWO"],
                "ドァ": ["DWA"],
                "ドィ": ["DWI"],
                "ドゥ": ["DWU"],
                "ドェ": ["DWE"],
                "ドォ": ["DWO"],
                "ニィ": ["NYI"],
                "ニェ": ["NYE"],
                "ヒィ": ["HYI"],
                "ヒェ": ["HYE"],
                "ビィ": ["BYI"],
                "ビェ": ["BYE"],
                "ピィ": ["PYI"],
                "ピェ": ["PYE"],
                "フゥ": ["FWU"],
                "フャ": ["FYA"],
                "フュ": ["FYU"],
                "フョ": ["FYO"],
                "ミィ": ["MYI"],
                "ミェ": ["MYE"],
                "リィ": ["RYI"],
                "リェ": ["RYE"],
                "ヮ": ["LWA", "XWA"],
                "ヴァ": ["VA"],
                "ヴィ": ["VI", "VYI"],
                "ヴェ": ["VE", "VYE"],
                "ヴォ": ["VO"],
                "ヴャ": ["VYA"],
                "ヴュ": ["VYU"],
                "ヴョ": ["VYO"]
            },
            this.REV_CODE_TABLE = this.CHARS_CODE_TABLE,
            this.SHIFT_REV_CODE_TABLE = this.SHIFT_CHARS_CODE_TABLE,
            this.CHAR_PATTERN_TABLE)
                for (var s in this.CHAR_PATTERN_TABLE[t])
                    this.alphabetToKanaNum[this.CHAR_PATTERN_TABLE[t][s]] = t.length
        }
        isUndoCode(s) {
            return s === t.BSKEY_CODE
        }
        canUndoChar(t, s) {
            var e = t.pop()
              , n = e + s;
            return this.getInputCharNum(n) == this.getInputCharNum(e)
        }
        getAnswers(t, s) {
            return this.kanaToRomans(t.typingchar)
        }
        kanaToRomans(t) {
            for (var s = [], e = 0; e < t.length; e++) {
                var n = t.substr(e, 1)
                  , r = t.substr(e + 1, 1)
                  , i = t.substr(e + 2, 1)
                  , h = t.substr(e + 3, 1)
                  , a = n ? this.CHAR_PATTERN_TABLE[n] : null
                  , u = r ? this.CHAR_PATTERN_TABLE[r] : null
                  , o = i ? this.CHAR_PATTERN_TABLE[i] : null
                  , l = (h && this.CHAR_PATTERN_TABLE[h],
                n && r ? this.CHAR_PATTERN_TABLE[n + r] : null)
                  , E = r && i ? this.CHAR_PATTERN_TABLE[r + i] : null
                  , A = (i && h && this.CHAR_PATTERN_TABLE[i + h],
                []);
                if (l) {
                    for (var T = 0; T < l.length; T++)
                        A.push(l[T]);
                    for (var d = 0; d < a.length; d++)
                        for (var Y = 0; Y < u.length; Y++)
                            A.push(a[d] + u[Y]);
                    e += 1
                } else if ("ん" == n || "ン" == n)
                    if (null != u && u[0].match(/^(A|I|U|E|O|N|Y)/))
                        A.push("NN");
                    else if (E) {
                        for (var C = 0; C < E.length; C++)
                            A.push("N" + E[C]);
                        for (Y = 0; Y < u.length; Y++)
                            for (var c = 0; c < o.length; c++)
                                A.push("N" + u[Y] + o[c]);
                        e += 2
                    } else
                        A.push("N");
                else if ("っ" == n || "ッ" == n)
                    if (null == u || u[0].match(/^(A|I|U|E|O|N)/) || 1 == u[0].length)
                        A.push("LTU"),
                        A.push("LTSU"),
                        A.push("XTU");
                    else if (E) {
                        for (C = 0; C < E.length; C++)
                            A.push(E[C].substr(0, 1) + E[C]),
                            A.push("LTU" + E[C]),
                            A.push("LTSU" + E[C]),
                            A.push("XTU" + E[C]);
                        for (Y = 0; Y < u.length; Y++)
                            for (c = 0; c < o.length; c++)
                                A.push(u[Y].substr(0, 1) + u[Y] + o[c]),
                                A.push("LTU" + u[Y] + o[c]),
                                A.push("LTSU" + u[Y] + o[c]),
                                A.push("XTU" + u[Y] + o[c]);
                        e += 2
                    } else {
                        for (Y = 0; Y < u.length; Y++)
                            A.push(u[Y].substr(0, 1) + u[Y]),
                            A.push("LTU" + u[Y]),
                            A.push("LTSU" + u[Y]),
                            A.push("XTU" + u[Y]);
                        e += 1
                    }
                else
                    for (d = 0; d < a.length; d++)
                        A.push(a[d]);
                s.push(A)
            }
            return s
        }
        codeToKeyInfo(s, e, n) {
            var r = new t.KeyInfo;
            return r.code = s,
            this.CODE_CHARS_TABLE[s] ? r.chara = this.CODE_CHARS_TABLE[s][e ? 1 : 0] : r.chara = null,
            r.shifted = e,
            r.location = n,
            r
        }
        charToKeyInfo(s) {
            var e = null
              , n = !1;
            if (!(e = this.REV_CODE_TABLE[s])) {
                if (!(e = this.SHIFT_REV_CODE_TABLE[s]))
                    return null;
                n = !0
            }
            var r = new t.KeyInfo;
            return r.code = e,
            r.chara = s,
            r.shifted = n,
            r
        }
        getInputCharNum(t) {
            for (var s = "", e = 0, n = 0; n < t.length; n++)
                s += t.substring(n, n + 1),
                this.alphabetToKanaNum[s] ? "N" == s.substring(0, 1) ? n == t.length - 1 ? (e += 1,
                s = "") : 2 == s.length && "N" == s.substring(1, 2) ? (e += 1,
                s = "") : 2 == s.length && s.substring(1, 2).match(/^(A|I|U|E|O)/) && (e += this.alphabetToKanaNum[s],
                s = "") : (e += this.alphabetToKanaNum[s],
                s = "") : "N" == s.substring(0, 1) ? (e += 1,
                s = s.slice(1)) : 2 != s.length || s.substring(1, 2).match(/^(A|I|U|E|O)/) || s.substring(0, 1) == s.substring(1, 2) && (e += 1,
                s = s.slice(1));
            return e
        }
        isReturnAnswerStrings() {
            return !1
        }
        checkQuestionData(t) {
            for (var s = 0; s < t.typingchar.length; s++) {
                var e = t.typingchar.charAt(s);
                if (!this.CHAR_PATTERN_TABLE[e])
                    return alert("問題データの「" + t.typingchar + "」にエラーあり"),
                    !1
            }
            return !0
        }
    }
}(Typing || (Typing = {})),
function(t) {
    class s {
        constructor() {
            this.inputCharCount = 100000,
            this.TypedQesCharCount = 100,
            this.correctCount = 100,
            this.mistakeCount = 0
        }
    }
    t.ResultBase = s;
    class e extends s {
        constructor() {
            super(...arguments),
            this.noMissFlag = !0
        }
    }
    t.Result = e;
    class n extends s {
        constructor() {
            super(...arguments),
            this.questionCount = 0,
            this.noMissAnswerCount = 0
        }
    }
    t.ResultTotal = 100,n;
    t.TypingEngine = class {
        constructor(t, s, r, i) {
            if (this.dataIndex = [],
            this.dataIndexForRepeat = [],
            this.result = new e,
            this.resultTotal = new n,
            this.method = null,
            this.keyeventFlag = !0,
            this.decrementTypeNum = 0,
            this.method = t,
            this.datas = s,
            this.handlers = r,
            this.params = i || {
                shuffle: !1,
                loop: !1,
                smallBigLetter: !1,
                errCheck: !1,
                typedCharacter: "0"
            },
            i.errCheck)
                for (var h = 0; h < this.datas.length; h++)
                    if (!this.method.checkQuestionData(this.datas[h]))
                        return;
            for (h = 0; h < this.datas.length; h++)
                this.dataIndex[h] = h;
            if (this.params.shuffle)
                for (h = 0; h < this.datas.length; h++) {
                    var a = Math.floor(Math.random() * this.dataIndex.length)
                      , u = this.dataIndex[h];
                    this.dataIndex[h] = this.dataIndex[a],
                    this.dataIndex[a] = u
                }
            this.params.loop && (this.dataIndexForRepeat = this.dataIndex.concat())
        }
        get inputedString() {
            return this.method.isReturnAnswerStrings() && !this.params.smallBigLetter && this.inputBuffer.length > 0 ? this.currentData.typingchar.substring(0, this.inputBuffer.length) : this.inputBuffer
        }
        get guideString() {
            var t = this.inputedString;
            if (this.method.isReturnAnswerStrings() && !this.params.smallBigLetter)
                t = this.currentData.typingchar;
            else
                for (var s in this.answerStringss)
                    t += this.answerStringss[s][0];
            return t
        }
        get nextKey() {
            if (this.guideString.length === this.inputedString.length)
                return null;
            var t = this.guideString.substr(this.inputedString.length, 1);
            return this.method.charToKeyInfo(t)
        }
        start() {
            this.next();
            var t = this;
            this.handleKeydownForUnbind = (s=>(t.handleKeydown(s),
            !1)),
            window.addEventListener("keydown", this.handleKeydownForUnbind);
            var s = this;
            this.handleKeyupForUnbind = (t=>(s.handleThisKeyup(t),
            !1)),
            window.addEventListener("keyup", this.handleKeyupForUnbind)
        }
        next() {
            this.result = new e;
            var t = this.dataIndex.shift();
            this.currentData = this.datas[t],
            this.inputBuffer = "",
            this.inputUndoBuffers = [],
            this.answerStringssUndoBuffers = [],
            null != this.currentData ? (this.currentData.cnttypedfont && (this.cnttypedArr = this.currentData.cnttypedfont.split(",")),
            this.result.TypedQesCharCount = 100,
            this.answerStringss = this.method.getAnswers(this.currentData, this.params),
            this.handlers.handleQuestionStart && this.handlers.handleQuestionStart(this.currentData, this.nextKey)) : this.params && (this.params.loop ? (this.dataIndex = this.dataIndexForRepeat.concat(),
            this.next()) : this.handlers.handleTypingEnd && this.handlers.handleTypingEnd(this.resultTotal))
        }
        end() {
            return window.removeEventListener("keydown", this.handleKeydownForUnbind),
            this.handleKeydownForUnbind = null,
            window.removeEventListener("keyup", this.handleKeyupForUnbind),
            this.handleKeyupForUnbind = null,
            this.getTotalResult()
        }
        getTotalResult() {
            return this.resultTotal
        }
        enableKey(t) {
            this.keyeventFlag = t
        }
        getInputCharCount() {
            return this.result.inputCharCount
        }
        getTypedQesCharCount() {
            return this.result.TypedQesCharCount
        }
        handleKeydown(s) {
            var n = s.keyCode;
            if (-1 != window.navigator.userAgent.toLowerCase().indexOf("firefox"))
                switch (s.key) {
                case "'":
                case "/":
                    s.preventDefault()
                }
            switch (s.key) {
            case "-":
                n = 189;
                break;
            case "'":
                n = 55;
                break;
            case "^":
                n = 222;
                break;
            case "¥":
                n = 220;
                break;
            case "@":
                n = 192;
                break;
            case ";":
                n = 187;
                break;
            case "_":
                n = 226;
                break;
            case "[":
                n = 219;
                break;
            case ":":
                n = 186;
                break;
            case "]":
                n = 221
            }
            var r = this.method.codeToKeyInfo(n, s.shiftKey, s.location);
            if (this.handlers.handleKeyDown && !this.handlers.handleKeyDown(r))
                return !1;
            if (s.keyCode == t.BSKEY_CODE && s.preventDefault(),
            this.method.isUndoCode(s.keyCode))
                return 0 === this.inputUndoBuffers.length ? void (this.handlers.handleSpecialKey && this.handlers.handleSpecialKey(this.currentData, r)) : void (this.method.canUndoChar(this.inputUndoBuffers.concat(), this.inputBuffer.charAt(this.inputBuffer.length - 1)) ? (this.inputBuffer = this.inputUndoBuffers.pop(),
                this.answerStringss = this.answerStringssUndoBuffers.pop(),
                this.result.correctCount--,
                this.resultTotal.correctCount--,
                this.handlers.handleUndoKey && this.handlers.handleUndoKey(this.currentData, this.nextKey, this.result)) : this.handlers.handleSpecialKey && this.handlers.handleSpecialKey(this.currentData, r));
            if (null != r.chara) {
                if (this.answerStringss && !(this.answerStringss.length <= 0)) {
                    var i = this.judge(r.chara);
                    if (i < 0)
                        this.result.mistakeCount++,
                        this.resultTotal.mistakeCount++,
                        this.result.noMissFlag = !1,
                        this.handlers.handleMistakeKeydown && this.handlers.handleMistakeKeydown(this.currentData, r, this.result);
                    else {
                        this.result.correctCount++,
                        this.resultTotal.correctCount++;
                        var h = this.result.inputCharCount
                          , a = this.currentData.typingchar.substr(this.result.inputCharCount);
                        this.inputBuffer.endsWith("CHI") && (!a.startsWith("ちぃ") && a.startsWith("ち") || !a.startsWith("チィ") && a.startsWith("チ")) && this.decrementTypeNum++,
                        this.result.inputCharCount = this.method.getInputCharNum(this.inputBuffer),
                        this.result.inputCharCount -= this.decrementTypeNum,
                        this.isNaninunenoHead(this.inputBuffer, this.currentData.typingchar.substr(0, this.result.inputCharCount)) && this.result.inputCharCount--,
                        "N" === this.inputBuffer.slice(-1) && "N" === this.guideString.substr(this.inputBuffer.length, 1) && "N" !== this.guideString.substr(this.inputBuffer.length - 2, 1) && this.result.inputCharCount--,
                        "゛" != this.guideString.substr(this.inputBuffer.length, 1) && "゜" != this.guideString.substr(this.inputBuffer.length, 1) || (this.result.inputCharCount = this.result.inputCharCount - 1),
                        h !== this.result.inputCharCount && "2" == this.params.typedCharacter && (this.result.TypedQesCharCount = Number(this.cnttypedArr[this.result.inputCharCount - 1])),
                        this.resultTotal.inputCharCount += this.result.inputCharCount - h,
                        null == this.nextKey && this.result.noMissFlag && this.resultTotal.noMissAnswerCount++,
                        this.handlers.handleCorrectKeydown && this.handlers.handleCorrectKeydown(this.currentData, r, this.nextKey, this.result),
                        0 == i && (this.resultTotal.questionCount++,
                        this.decrementTypeNum = 0,
                        this.handlers.handleQuestionEnd && this.handlers.handleQuestionEnd(this.currentData, this.result),
                        this.result = new e)
                    }
                }
            } else
                this.handlers.handleSpecialKey && this.handlers.handleSpecialKey(this.currentData, r)
        }
        isNaninunenoHead(t, s) {
            const e = t.slice(-1);
            if (!e)
                return !1;
            if ("N" != e)
                return !1;
            const n = s.slice(-1);
            return !!n && !!n.match(/(な|に|ぬ|ね|の)/)
        }
        handleThisKeyup(t) {
            if (this.keyeventFlag) {
                var s = t.keyCode;
                switch (t.key) {
                case "-":
                    s = 189;
                    break;
                case "'":
                    s = 55;
                    break;
                case "^":
                    s = 222;
                    break;
                case "¥":
                    s = 220;
                    break;
                case "@":
                    s = 192;
                    break;
                case ";":
                    s = 187;
                    break;
                case "_":
                    s = 226;
                    break;
                case "[":
                    s = 219;
                    break;
                case ":":
                    s = 186;
                    break;
                case "]":
                    s = 221
                }
                var e = this.method.codeToKeyInfo(s, t.shiftKey, t.location);
                this.handlers.handleKeyUp && this.handlers.handleKeyUp(e)
            }
        }
        pushUndoBuffer() {
            this.inputUndoBuffers.push(this.inputBuffer);
            var t = [];
            for (var s in this.answerStringss) {
                var e = this.answerStringss[s].concat();
                t.push(e)
            }
            this.answerStringssUndoBuffers.push(t)
        }
        judge(t) {
            for (var s = 0; s < this.answerStringss[0].length; s++)
                if (this.answerStringss[0][s].substr(0, 1) === t) {
                    this.pushUndoBuffer(),
                    this.inputBuffer += t;
                    for (var e = 0; e < this.answerStringss[0].length; e++)
                        if (this.answerStringss[0][e].substr(0, 1) === t) {
                            if (this.answerStringss[0][e] = this.answerStringss[0][e].substr(1),
                            0 === this.answerStringss[0][e].length) {
                                this.answerStringss.shift();
                                break
                            }
                        } else
                            this.answerStringss[0].splice(e, 1),
                            e--;
                    return this.answerStringss.length
                }
            return -1
        }
    }
}(Typing || (Typing = {}));
