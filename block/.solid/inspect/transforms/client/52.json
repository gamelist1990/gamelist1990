{
  "id": "C:/Users/issei/Velocity/src/API/Tab.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "vite:esbuild"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Setter, Accessor, createSignal } from \"solid-js\";\r\nimport {\r\n  tabs,\r\n  setTabs,\r\n  tabStack,\r\n  setTabStack,\r\n  bookmarks,\r\n  setBookmarks\r\n} from \"~/data/appState\";\r\nimport keybinds from \"~/util/keybinds\";\r\nimport * as urlUtil from \"~/util/url\";\r\nimport handleClick from \"~/util/clickHandler\";\r\nimport Bookmark from \"./Bookmark\";\r\nimport { bindIFrameMousemove } from \"~/components/ContextMenu\";\r\nimport ContextItem from \"./ContextItem\";\r\nimport generateContextButtons from \"~/util/generateContextButtons\";\r\n\r\ninterface ProxyWindow extends Window {\r\n  __uv$location: Location;\r\n}\r\n\r\nexport default class Tab {\r\n  iframe: HTMLIFrameElement = document.createElement(\"iframe\");\r\n  id: number = Math.floor(Math.random() * 1000000000000000);\r\n  #pinned: [Accessor<boolean>, Setter<boolean>] = createSignal<boolean>(false);\r\n  #small: [Accessor<boolean>, Setter<boolean>] = createSignal<boolean>(false);\r\n  #title: [Accessor<string>, Setter<string>] = createSignal<string>(\"\");\r\n  #url: [Accessor<string>, Setter<string>] = createSignal<string>(\"\");\r\n  #search: [Accessor<string | boolean>, Setter<string | boolean>] =\r\n    createSignal<string | boolean>(false);\r\n  #icon: [Accessor<string>, Setter<string>] = createSignal<string>(\"\");\r\n  #focus: [Accessor<boolean>, Setter<boolean>] = createSignal<boolean>(false);\r\n  #loading: [Accessor<boolean>, Setter<boolean>] = createSignal<boolean>(true);\r\n  #playing: [Accessor<boolean>, Setter<boolean>] = createSignal<boolean>(false);\r\n  #scrollPos: number = 0;\r\n\r\n  constructor(url?: string, isActive?: boolean) {\r\n    // initialize iframe\r\n    this.iframe.classList.add(\"w-full\", \"h-full\", \"border-0\");\r\n    if (!isActive) this.iframe.classList.add(\"hidden\");\r\n    document\r\n      .querySelector<HTMLDivElement>(\"#content\")\r\n      ?.appendChild(this.iframe);\r\n    this.#injectScripts();\r\n    this.navigate(url || \"about:newTab\");\r\n    requestAnimationFrame(this.#updateDetails.bind(this));\r\n\r\n    // Add tab to stack\r\n    setTabs([...tabs(), this]);\r\n    if (isActive) {\r\n      this.focus = true;\r\n      setTabStack(new Set([this, ...tabStack()]));\r\n    } else {\r\n      setTabStack(new Set([...tabStack(), this]));\r\n    }\r\n  }\r\n\r\n  goBack() {\r\n    this.iframe.contentWindow?.history.back();\r\n  }\r\n\r\n  goForward() {\r\n    this.iframe.contentWindow?.history.forward();\r\n  }\r\n\r\n  pin() {}\r\n\r\n  reload() {\r\n    this.iframe.contentWindow?.location.reload();\r\n  }\r\n\r\n  stop() {\r\n    this.loading = false;\r\n    this.iframe.contentWindow?.stop();\r\n  }\r\n\r\n  navigate(query: string) {\r\n    let url = urlUtil.generateProxyUrl(query);\r\n\r\n    // bind events & inject scripts\r\n    this.iframe.onload = () => {\r\n      this.loading = false;\r\n    };\r\n\r\n    this.iframe.src = url;\r\n  }\r\n\r\n  close(event?: MouseEvent): void {\r\n    if (event) {\r\n      event.stopPropagation();\r\n    }\r\n    if (tabs().length === 1) {\r\n      new Tab(\"about:newTab\", true);\r\n    }\r\n    this.#cleanup();\r\n    setTabStack(new Set(Array.from(tabStack()).filter((tab) => tab !== this)));\r\n    setTabs(tabs().filter((tab) => tab !== this));\r\n    Array.from(tabStack())[0].focus = true;\r\n  }\r\n\r\n  bookmark() {\r\n    new Bookmark({\r\n      name: this.#title[0](),\r\n      url: this.#url[0](),\r\n      icon: this.#icon[0]()\r\n    });\r\n  }\r\n\r\n  executeScript(script: string): any {\r\n    return this.iframe.contentWindow?.window.eval(script);\r\n  }\r\n\r\n  setDevTools(state?: boolean) {\r\n    const iframeWindow = this.iframe.contentWindow as Window & { eruda: any };\r\n    if (!iframeWindow.eruda) {\r\n      const script = document.createElement(\"script\");\r\n      script.src = \"https://cdn.jsdelivr.net/npm/eruda\";\r\n      script.onload = () => {\r\n        this.setDevTools(state);\r\n      };\r\n      this.iframe.contentDocument?.body.appendChild(script);\r\n      return;\r\n    }\r\n\r\n    if (!iframeWindow.eruda._isInit) iframeWindow.eruda.init();\r\n\r\n    const btnBk = iframeWindow.eruda._entryBtn._$el[0].cloneNode(true);\r\n    btnBk.style.display = \"none\";\r\n    iframeWindow.eruda._entryBtn._$el[0].parentElement.replaceChild(\r\n      btnBk,\r\n      iframeWindow.eruda._entryBtn._$el[0]\r\n    );\r\n    btnBk.onclick = () => {\r\n      btnBk.style.display = \"none\";\r\n      iframeWindow.eruda.hide();\r\n    };\r\n    iframeWindow.eruda._entryBtn._$el[0] = btnBk;\r\n\r\n    if (state) {\r\n      btnBk.style.display = \"flex\";\r\n      iframeWindow.eruda.show();\r\n    } else {\r\n      if (\r\n        state !== undefined ||\r\n        iframeWindow.eruda._shadowRoot.querySelector(\".eruda-dev-tools\").style\r\n          .display !== \"none\"\r\n      ) {\r\n        btnBk.style.display = \"none\";\r\n        iframeWindow.eruda.hide();\r\n      } else {\r\n        btnBk.style.display = \"flex\";\r\n        iframeWindow.eruda.show();\r\n      }\r\n    }\r\n  }\r\n\r\n  #cleanup() {\r\n    document\r\n      .querySelector<HTMLDivElement>(\"#content\")\r\n      ?.removeChild(this.iframe);\r\n  }\r\n\r\n  #injectScripts() {\r\n    this.iframe.contentWindow?.addEventListener(\"keydown\", keybinds);\r\n    this.iframe.contentWindow?.addEventListener(\"click\", handleClick);\r\n    (this.iframe.contentWindow || ({} as { open: any })).open = (\r\n      url: string\r\n    ) => {\r\n      const tab = new Tab(url, true);\r\n      return tab.iframe.contentWindow;\r\n    };\r\n    (this.iframe.contentWindow || ({} as { close: any })).close = () => {\r\n      this.close();\r\n    };\r\n    this.iframe.contentWindow?.addEventListener(\"unload\", () => {\r\n      setTimeout(() => {\r\n        this.#injectScripts();\r\n      });\r\n      this.loading = true;\r\n    });\r\n    this.iframe.contentWindow?.addEventListener(\"wheel\", () => {\r\n      setTimeout(() => {\r\n        this.#scrollPos =\r\n          this.iframe.contentDocument?.documentElement.scrollTop || 0;\r\n      });\r\n    });\r\n    this.iframe.contentWindow?.addEventListener(\r\n      \"contextmenu\",\r\n      (event: Event & { data?: ContextItem[] }) => {\r\n        if (event.target)\r\n          event.data = generateContextButtons(event.target as HTMLElement);\r\n      }\r\n    );\r\n    this.iframe.contentWindow?.addEventListener(\"load\", () => {\r\n      this.setDevTools(false);\r\n    });\r\n    bindIFrameMousemove(this.iframe);\r\n  }\r\n\r\n  #updateDetails(): void {\r\n    this.#url[1](\r\n      urlUtil.normalize(\r\n        (this.iframe.contentWindow as ProxyWindow)?.__uv$location?.toString() ||\r\n          this.iframe.src\r\n      )\r\n    );\r\n\r\n    this.title = this.iframe.contentDocument?.title || this.#url[0]();\r\n\r\n    const icons =\r\n      this.iframe.contentDocument?.head.querySelectorAll<HTMLLinkElement>(\r\n        \"link[rel='favicon'], link[rel='shortcut icon'], link[rel='icon']\"\r\n      );\r\n    const ico = icons?.[icons.length - 1]?.href;\r\n\r\n    if (ico && /^data:/.test(ico)) {\r\n      this.icon = ico;\r\n    } else if (ico) {\r\n      this.icon = ico;\r\n    } else {\r\n      this.icon = \"/icons/earth.svg\";\r\n    }\r\n\r\n    const media: (HTMLAudioElement | HTMLVideoElement)[] = Array.from(\r\n      this.iframe.contentDocument?.querySelectorAll<\r\n        HTMLAudioElement | HTMLVideoElement\r\n      >(\"audio, video\") ?? []\r\n    );\r\n    this.playing = media.some((x) => !x.paused && !x.muted);\r\n\r\n    setTimeout(this.#updateDetails.bind(this), 100);\r\n  }\r\n\r\n  get url(): Accessor<string> {\r\n    return this.#url[0];\r\n  }\r\n\r\n  set focus(value: boolean | Accessor<boolean>) {\r\n    /*\r\n      We also need to store the scroll position for each iframe because when they get hidden and then\r\n      un-hidden the scroll position gets reset, this seems to be a bug with browsers and not a result\r\n      of the code here.\r\n    */\r\n    if (value) {\r\n      tabs().forEach((tab) => {\r\n        tab.focus = false;\r\n        tab.iframe.classList.add(\"hidden\");\r\n      });\r\n      setTabStack(new Set([this, ...tabStack()]));\r\n      this.iframe.classList.remove(\"hidden\");\r\n      (\r\n        this.iframe.contentDocument || ({ documentElement: {} } as Document)\r\n      ).documentElement.scrollTop = this.#scrollPos;\r\n    }\r\n    this.#focus[1](value);\r\n  }\r\n\r\n  get focus(): Accessor<boolean> {\r\n    return this.#focus[0];\r\n  }\r\n\r\n  get search(): Accessor<string | boolean> {\r\n    return this.#search[0];\r\n  }\r\n\r\n  set search(value: string | boolean | Accessor<string | boolean>) {\r\n    this.#search[1](value);\r\n  }\r\n\r\n  get pinned(): Accessor<boolean> {\r\n    return this.#pinned[0];\r\n  }\r\n\r\n  set pinned(value: boolean | Accessor<boolean>) {\r\n    this.#pinned[1](value);\r\n  }\r\n\r\n  get title(): Accessor<string> {\r\n    return this.#title[0];\r\n  }\r\n\r\n  set title(title: string | Accessor<string>) {\r\n    this.#title[1](title);\r\n  }\r\n\r\n  get icon(): Accessor<string> {\r\n    return this.#icon[0];\r\n  }\r\n\r\n  set icon(icon: string | Accessor<string>) {\r\n    this.#icon[1](icon);\r\n  }\r\n\r\n  get loading(): Accessor<boolean> {\r\n    return this.#loading[0];\r\n  }\r\n\r\n  set loading(value: boolean | Accessor<boolean>) {\r\n    this.#loading[1](value);\r\n  }\r\n\r\n  get playing(): Accessor<boolean> {\r\n    return this.#playing[0];\r\n  }\r\n\r\n  set playing(value: boolean | Accessor<boolean>) {\r\n    this.#playing[1](value);\r\n  }\r\n\r\n  get small(): Accessor<boolean> {\r\n    return this.#small[0];\r\n  }\r\n}\r\n",
      "start": 1677131500265,
      "end": 1677131500566
    },
    {
      "name": "vite:esbuild",
      "result": "import { createSignal } from \"solid-js\";\nimport {\n  tabs,\n  setTabs,\n  tabStack,\n  setTabStack\n} from \"~/data/appState\";\nimport keybinds from \"~/util/keybinds\";\nimport * as urlUtil from \"~/util/url\";\nimport handleClick from \"~/util/clickHandler\";\nimport Bookmark from \"./Bookmark\";\nimport { bindIFrameMousemove } from \"~/components/ContextMenu\";\nimport generateContextButtons from \"~/util/generateContextButtons\";\nexport default class Tab {\n  iframe = document.createElement(\"iframe\");\n  id = Math.floor(Math.random() * 1e15);\n  #pinned = createSignal(false);\n  #small = createSignal(false);\n  #title = createSignal(\"\");\n  #url = createSignal(\"\");\n  #search = createSignal(false);\n  #icon = createSignal(\"\");\n  #focus = createSignal(false);\n  #loading = createSignal(true);\n  #playing = createSignal(false);\n  #scrollPos = 0;\n  constructor(url, isActive) {\n    this.iframe.classList.add(\"w-full\", \"h-full\", \"border-0\");\n    if (!isActive)\n      this.iframe.classList.add(\"hidden\");\n    document.querySelector(\"#content\")?.appendChild(this.iframe);\n    this.#injectScripts();\n    this.navigate(url || \"about:newTab\");\n    requestAnimationFrame(this.#updateDetails.bind(this));\n    setTabs([...tabs(), this]);\n    if (isActive) {\n      this.focus = true;\n      setTabStack(/* @__PURE__ */ new Set([this, ...tabStack()]));\n    } else {\n      setTabStack(/* @__PURE__ */ new Set([...tabStack(), this]));\n    }\n  }\n  goBack() {\n    this.iframe.contentWindow?.history.back();\n  }\n  goForward() {\n    this.iframe.contentWindow?.history.forward();\n  }\n  pin() {\n  }\n  reload() {\n    this.iframe.contentWindow?.location.reload();\n  }\n  stop() {\n    this.loading = false;\n    this.iframe.contentWindow?.stop();\n  }\n  navigate(query) {\n    let url = urlUtil.generateProxyUrl(query);\n    this.iframe.onload = () => {\n      this.loading = false;\n    };\n    this.iframe.src = url;\n  }\n  close(event) {\n    if (event) {\n      event.stopPropagation();\n    }\n    if (tabs().length === 1) {\n      new Tab(\"about:newTab\", true);\n    }\n    this.#cleanup();\n    setTabStack(new Set(Array.from(tabStack()).filter((tab) => tab !== this)));\n    setTabs(tabs().filter((tab) => tab !== this));\n    Array.from(tabStack())[0].focus = true;\n  }\n  bookmark() {\n    new Bookmark({\n      name: this.#title[0](),\n      url: this.#url[0](),\n      icon: this.#icon[0]()\n    });\n  }\n  executeScript(script) {\n    return this.iframe.contentWindow?.window.eval(script);\n  }\n  setDevTools(state) {\n    const iframeWindow = this.iframe.contentWindow;\n    if (!iframeWindow.eruda) {\n      const script = document.createElement(\"script\");\n      script.src = \"https://cdn.jsdelivr.net/npm/eruda\";\n      script.onload = () => {\n        this.setDevTools(state);\n      };\n      this.iframe.contentDocument?.body.appendChild(script);\n      return;\n    }\n    if (!iframeWindow.eruda._isInit)\n      iframeWindow.eruda.init();\n    const btnBk = iframeWindow.eruda._entryBtn._$el[0].cloneNode(true);\n    btnBk.style.display = \"none\";\n    iframeWindow.eruda._entryBtn._$el[0].parentElement.replaceChild(\n      btnBk,\n      iframeWindow.eruda._entryBtn._$el[0]\n    );\n    btnBk.onclick = () => {\n      btnBk.style.display = \"none\";\n      iframeWindow.eruda.hide();\n    };\n    iframeWindow.eruda._entryBtn._$el[0] = btnBk;\n    if (state) {\n      btnBk.style.display = \"flex\";\n      iframeWindow.eruda.show();\n    } else {\n      if (state !== void 0 || iframeWindow.eruda._shadowRoot.querySelector(\".eruda-dev-tools\").style.display !== \"none\") {\n        btnBk.style.display = \"none\";\n        iframeWindow.eruda.hide();\n      } else {\n        btnBk.style.display = \"flex\";\n        iframeWindow.eruda.show();\n      }\n    }\n  }\n  #cleanup() {\n    document.querySelector(\"#content\")?.removeChild(this.iframe);\n  }\n  #injectScripts() {\n    this.iframe.contentWindow?.addEventListener(\"keydown\", keybinds);\n    this.iframe.contentWindow?.addEventListener(\"click\", handleClick);\n    (this.iframe.contentWindow || {}).open = (url) => {\n      const tab = new Tab(url, true);\n      return tab.iframe.contentWindow;\n    };\n    (this.iframe.contentWindow || {}).close = () => {\n      this.close();\n    };\n    this.iframe.contentWindow?.addEventListener(\"unload\", () => {\n      setTimeout(() => {\n        this.#injectScripts();\n      });\n      this.loading = true;\n    });\n    this.iframe.contentWindow?.addEventListener(\"wheel\", () => {\n      setTimeout(() => {\n        this.#scrollPos = this.iframe.contentDocument?.documentElement.scrollTop || 0;\n      });\n    });\n    this.iframe.contentWindow?.addEventListener(\n      \"contextmenu\",\n      (event) => {\n        if (event.target)\n          event.data = generateContextButtons(event.target);\n      }\n    );\n    this.iframe.contentWindow?.addEventListener(\"load\", () => {\n      this.setDevTools(false);\n    });\n    bindIFrameMousemove(this.iframe);\n  }\n  #updateDetails() {\n    this.#url[1](\n      urlUtil.normalize(\n        this.iframe.contentWindow?.__uv$location?.toString() || this.iframe.src\n      )\n    );\n    this.title = this.iframe.contentDocument?.title || this.#url[0]();\n    const icons = this.iframe.contentDocument?.head.querySelectorAll(\n      \"link[rel='favicon'], link[rel='shortcut icon'], link[rel='icon']\"\n    );\n    const ico = icons?.[icons.length - 1]?.href;\n    if (ico && /^data:/.test(ico)) {\n      this.icon = ico;\n    } else if (ico) {\n      this.icon = ico;\n    } else {\n      this.icon = \"/icons/earth.svg\";\n    }\n    const media = Array.from(\n      this.iframe.contentDocument?.querySelectorAll(\"audio, video\") ?? []\n    );\n    this.playing = media.some((x) => !x.paused && !x.muted);\n    setTimeout(this.#updateDetails.bind(this), 100);\n  }\n  get url() {\n    return this.#url[0];\n  }\n  set focus(value) {\n    if (value) {\n      tabs().forEach((tab) => {\n        tab.focus = false;\n        tab.iframe.classList.add(\"hidden\");\n      });\n      setTabStack(/* @__PURE__ */ new Set([this, ...tabStack()]));\n      this.iframe.classList.remove(\"hidden\");\n      (this.iframe.contentDocument || { documentElement: {} }).documentElement.scrollTop = this.#scrollPos;\n    }\n    this.#focus[1](value);\n  }\n  get focus() {\n    return this.#focus[0];\n  }\n  get search() {\n    return this.#search[0];\n  }\n  set search(value) {\n    this.#search[1](value);\n  }\n  get pinned() {\n    return this.#pinned[0];\n  }\n  set pinned(value) {\n    this.#pinned[1](value);\n  }\n  get title() {\n    return this.#title[0];\n  }\n  set title(title) {\n    this.#title[1](title);\n  }\n  get icon() {\n    return this.#icon[0];\n  }\n  set icon(icon) {\n    this.#icon[1](icon);\n  }\n  get loading() {\n    return this.#loading[0];\n  }\n  set loading(value) {\n    this.#loading[1](value);\n  }\n  get playing() {\n    return this.#playing[0];\n  }\n  set playing(value) {\n    this.#playing[1](value);\n  }\n  get small() {\n    return this.#small[0];\n  }\n}\n",
      "start": 1677131500566,
      "end": 1677131500789
    }
  ],
  "virtual": false
}