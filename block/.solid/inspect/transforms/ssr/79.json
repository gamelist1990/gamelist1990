{
  "id": "C:/Users/issei/Velocity/src/util/generateContextButtons.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "vite:esbuild"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import ContextItem from \"~/API/ContextItem\";\r\nimport Tab from \"~/API/Tab\";\r\nimport { tabStack } from \"~/data/appState\";\r\nimport { open } from \"~/util/clickHandler\";\r\n\r\nexport default function generateContextButtons(\r\n  element: HTMLElement\r\n): ContextItem[] {\r\n  const buttons: ContextItem[] = [];\r\n\r\n  if (isElementOfType(element, \"a\")) {\r\n    buttons.push(\r\n      new ContextItem({\r\n        text: \"Open link in new tab\",\r\n        onClick: () => {\r\n          open(undefined, getElementAttribute(element, \"href\"), true, false);\r\n        }\r\n      }),\r\n      new ContextItem({\r\n        text: \"Copy link address\",\r\n        onClick: () => {\r\n          navigator.clipboard.writeText(getElementAttribute(element, \"href\"));\r\n        }\r\n      }),\r\n      new ContextItem({ separator: true })\r\n    );\r\n  }\r\n\r\n  if (isElementOfType(element, \"img\")) {\r\n    buttons.push(\r\n      new ContextItem({\r\n        text: \"Open image in new tab\",\r\n        onClick: () => {\r\n          open(undefined, getElementAttribute(element, \"src\"), true, false);\r\n        }\r\n      }),\r\n      new ContextItem({\r\n        text: \"Copy image address\",\r\n        onClick: () => {\r\n          navigator.clipboard.writeText(getElementAttribute(element, \"src\"));\r\n        }\r\n      }),\r\n      new ContextItem({ separator: true })\r\n    );\r\n  }\r\n\r\n  const selection = Array.from(tabStack())[0]\r\n    .iframe.contentWindow?.getSelection()\r\n    ?.toString();\r\n  if (selection) {\r\n    buttons.push(\r\n      new ContextItem({\r\n        text: \"Copy\",\r\n        onClick: () => {\r\n          navigator.clipboard.writeText(selection);\r\n        }\r\n      }),\r\n      new ContextItem({ separator: true })\r\n    );\r\n  }\r\n\r\n  if (buttons.length === 0) {\r\n    buttons.push(\r\n      new ContextItem({\r\n        text: \"Back\",\r\n        onClick: () => {\r\n          Array.from(tabStack())[0].goBack();\r\n        }\r\n      }),\r\n      new ContextItem({\r\n        text: \"Forward\",\r\n        onClick: () => {\r\n          Array.from(tabStack())[0].goForward();\r\n        }\r\n      }),\r\n      new ContextItem({\r\n        text: \"Reload\",\r\n        onClick: () => {\r\n          Array.from(tabStack())[0].reload();\r\n        }\r\n      }),\r\n      new ContextItem({ separator: true })\r\n    );\r\n  }\r\n\r\n  buttons.push(\r\n    new ContextItem({\r\n      text: \"View Page Source\",\r\n      onClick: () => {\r\n        new Tab(\"view-source:\" + Array.from(tabStack())[0].url(), true);\r\n      }\r\n    }),\r\n    new ContextItem({\r\n      text: \"Inspect\",\r\n      onClick: () => {\r\n        Array.from(tabStack())[0].setDevTools(true);\r\n      }\r\n    })\r\n  );\r\n\r\n  return buttons;\r\n}\r\n\r\nfunction isElementOfType(element: HTMLElement, type: string): boolean {\r\n  if (element.tagName.toLowerCase() === type) {\r\n    return true;\r\n  } else if (element.parentElement) {\r\n    return isElementOfType(element.parentElement, type);\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction getElementAttribute(element: any, attribute: string): string {\r\n  if (element[attribute]) {\r\n    return element[attribute];\r\n  } else if (element.parentElement) {\r\n    return getElementAttribute(element.parentElement, attribute);\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\n",
      "start": 1677131503213,
      "end": 1677131503320
    },
    {
      "name": "vite:esbuild",
      "result": "import ContextItem from \"~/API/ContextItem\";\nimport Tab from \"~/API/Tab\";\nimport { tabStack } from \"~/data/appState\";\nimport { open } from \"~/util/clickHandler\";\nexport default function generateContextButtons(element) {\n  const buttons = [];\n  if (isElementOfType(element, \"a\")) {\n    buttons.push(\n      new ContextItem({\n        text: \"Open link in new tab\",\n        onClick: () => {\n          open(void 0, getElementAttribute(element, \"href\"), true, false);\n        }\n      }),\n      new ContextItem({\n        text: \"Copy link address\",\n        onClick: () => {\n          navigator.clipboard.writeText(getElementAttribute(element, \"href\"));\n        }\n      }),\n      new ContextItem({ separator: true })\n    );\n  }\n  if (isElementOfType(element, \"img\")) {\n    buttons.push(\n      new ContextItem({\n        text: \"Open image in new tab\",\n        onClick: () => {\n          open(void 0, getElementAttribute(element, \"src\"), true, false);\n        }\n      }),\n      new ContextItem({\n        text: \"Copy image address\",\n        onClick: () => {\n          navigator.clipboard.writeText(getElementAttribute(element, \"src\"));\n        }\n      }),\n      new ContextItem({ separator: true })\n    );\n  }\n  const selection = Array.from(tabStack())[0].iframe.contentWindow?.getSelection()?.toString();\n  if (selection) {\n    buttons.push(\n      new ContextItem({\n        text: \"Copy\",\n        onClick: () => {\n          navigator.clipboard.writeText(selection);\n        }\n      }),\n      new ContextItem({ separator: true })\n    );\n  }\n  if (buttons.length === 0) {\n    buttons.push(\n      new ContextItem({\n        text: \"Back\",\n        onClick: () => {\n          Array.from(tabStack())[0].goBack();\n        }\n      }),\n      new ContextItem({\n        text: \"Forward\",\n        onClick: () => {\n          Array.from(tabStack())[0].goForward();\n        }\n      }),\n      new ContextItem({\n        text: \"Reload\",\n        onClick: () => {\n          Array.from(tabStack())[0].reload();\n        }\n      }),\n      new ContextItem({ separator: true })\n    );\n  }\n  buttons.push(\n    new ContextItem({\n      text: \"View Page Source\",\n      onClick: () => {\n        new Tab(\"view-source:\" + Array.from(tabStack())[0].url(), true);\n      }\n    }),\n    new ContextItem({\n      text: \"Inspect\",\n      onClick: () => {\n        Array.from(tabStack())[0].setDevTools(true);\n      }\n    })\n  );\n  return buttons;\n}\nfunction isElementOfType(element, type) {\n  if (element.tagName.toLowerCase() === type) {\n    return true;\n  } else if (element.parentElement) {\n    return isElementOfType(element.parentElement, type);\n  } else {\n    return false;\n  }\n}\nfunction getElementAttribute(element, attribute) {\n  if (element[attribute]) {\n    return element[attribute];\n  } else if (element.parentElement) {\n    return getElementAttribute(element.parentElement, attribute);\n  } else {\n    return \"\";\n  }\n}\n",
      "start": 1677131503321,
      "end": 1677131503328
    }
  ],
  "virtual": false
}