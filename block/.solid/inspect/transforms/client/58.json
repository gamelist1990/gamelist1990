{
  "id": "C:/Users/issei/Velocity/src/components/ContextMenu/index.tsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createSignal, For, JSX, onMount } from \"solid-js\";\r\nimport Button from \"./Button\";\r\nimport ContextItem from \"~/API/ContextItem\";\r\n\r\nconst [clientX, setClientX] = createSignal(0);\r\nconst [clientY, setClientY] = createSignal(0);\r\nconst [x, setX] = createSignal(0);\r\nconst [y, setY] = createSignal(0);\r\nconst [visible, setVisible] = createSignal(false);\r\nconst [buttons, setButtons] = createSignal<ContextItem[]>([]);\r\n\r\nexport function bindIFrameMousemove(scope: HTMLIFrameElement | Window) {\r\n  const scopeWindow =\r\n    scope instanceof HTMLIFrameElement\r\n      ? (scope.contentWindow as Window)\r\n      : scope;\r\n\r\n  if (!scopeWindow) return;\r\n\r\n  scopeWindow.addEventListener(\"visibilitychange\", () => {\r\n    setVisible(false);\r\n  });\r\n\r\n  scopeWindow.addEventListener(\"mousemove\", (event) => {\r\n    let offsetX = 0;\r\n    let offsetY = 0;\r\n\r\n    if (scope instanceof HTMLIFrameElement) {\r\n      const clRect = scope.getBoundingClientRect();\r\n      offsetX = clRect.left;\r\n      offsetY = clRect.top;\r\n    }\r\n\r\n    setClientX(event.clientX + offsetX);\r\n    setClientY(event.clientY + offsetY);\r\n  });\r\n\r\n  scopeWindow.addEventListener(\r\n    \"contextmenu\",\r\n    (event: MouseEvent & { data?: ContextItem[] }) => {\r\n      event.preventDefault();\r\n      if (event.data) {\r\n        setVisible(true);\r\n        setButtons(event.data);\r\n        let width =\r\n          document.querySelector<HTMLDivElement>(\"#context-menu\")?.offsetWidth;\r\n        let height =\r\n          document.querySelector<HTMLDivElement>(\"#context-menu\")?.offsetHeight;\r\n        let x = clientX();\r\n        let y = clientY();\r\n        if (width && x > window.innerWidth - width) x -= width;\r\n        if (height && y > window.innerHeight - height) y -= height;\r\n        setX(x);\r\n        setY(y);\r\n      } else {\r\n        setVisible(false);\r\n      }\r\n    }\r\n  );\r\n\r\n  scopeWindow.addEventListener(\"click\", () => {\r\n    setVisible(false);\r\n  });\r\n\r\n  scopeWindow.addEventListener(\"keydown\", (event) => {\r\n    setVisible(false);\r\n  });\r\n}\r\n\r\nexport default function ContextMenu(): JSX.Element {\r\n  onMount(() => {\r\n    bindIFrameMousemove(window);\r\n  });\r\n\r\n  function cancelEvent(event: Event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n  }\r\n\r\n  return (\r\n    <div\r\n      id=\"context-menu\"\r\n      class={`fixed ${\r\n        visible() ? \"display\" : \"hidden\"\r\n      } w-48 bg-[#2B2A33] shadow-lg rounded border border-[#b5b5b5] py-1`}\r\n      style={`left: ${x()}px; top: ${y()}px;`}\r\n      onContextMenu={cancelEvent}\r\n      onClick={cancelEvent}\r\n    >\r\n      <For each={buttons()}>\r\n        {(button: ContextItem): JSX.Element => {\r\n          if (button.separator) {\r\n            return <hr class=\"border-[#b5b5b5] my-1\" />;\r\n          } else {\r\n            return (\r\n              <Button\r\n                text={button.text as string}\r\n                onClick={() => {\r\n                  setVisible(false);\r\n                  button.onClick!();\r\n                }}\r\n              />\r\n            );\r\n          }\r\n        }}\r\n      </For>\r\n    </div>\r\n  );\r\n}\r\n",
      "start": 1677131499959,
      "end": 1677131500309
    },
    {
      "name": "solid",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { delegateEvents as _$delegateEvents } from \"solid-js/web\";\nimport { style as _$style } from \"solid-js/web\";\nimport { className as _$className } from \"solid-js/web\";\nimport { effect as _$effect } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<div id=\"context-menu\"></div>`, 2),\n  _tmpl$2 = /*#__PURE__*/_$template(`<hr class=\"border-[#b5b5b5] my-1\">`, 1);\nimport { createSignal, For, onMount } from \"solid-js\";\nimport Button from \"./Button\";\nconst [clientX, setClientX] = createSignal(0);\nconst [clientY, setClientY] = createSignal(0);\nconst [x, setX] = createSignal(0);\nconst [y, setY] = createSignal(0);\nconst [visible, setVisible] = createSignal(false);\nconst [buttons, setButtons] = createSignal([]);\nexport function bindIFrameMousemove(scope) {\n  const scopeWindow = scope instanceof HTMLIFrameElement ? scope.contentWindow : scope;\n  if (!scopeWindow) return;\n  scopeWindow.addEventListener(\"visibilitychange\", () => {\n    setVisible(false);\n  });\n  scopeWindow.addEventListener(\"mousemove\", event => {\n    let offsetX = 0;\n    let offsetY = 0;\n    if (scope instanceof HTMLIFrameElement) {\n      const clRect = scope.getBoundingClientRect();\n      offsetX = clRect.left;\n      offsetY = clRect.top;\n    }\n    setClientX(event.clientX + offsetX);\n    setClientY(event.clientY + offsetY);\n  });\n  scopeWindow.addEventListener(\"contextmenu\", event => {\n    event.preventDefault();\n    if (event.data) {\n      setVisible(true);\n      setButtons(event.data);\n      let width = document.querySelector(\"#context-menu\")?.offsetWidth;\n      let height = document.querySelector(\"#context-menu\")?.offsetHeight;\n      let x = clientX();\n      let y = clientY();\n      if (width && x > window.innerWidth - width) x -= width;\n      if (height && y > window.innerHeight - height) y -= height;\n      setX(x);\n      setY(y);\n    } else {\n      setVisible(false);\n    }\n  });\n  scopeWindow.addEventListener(\"click\", () => {\n    setVisible(false);\n  });\n  scopeWindow.addEventListener(\"keydown\", event => {\n    setVisible(false);\n  });\n}\nexport default function ContextMenu() {\n  onMount(() => {\n    bindIFrameMousemove(window);\n  });\n  function cancelEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  return (() => {\n    const _el$ = _tmpl$.cloneNode(true);\n    _el$.$$click = cancelEvent;\n    _el$.$$contextmenu = cancelEvent;\n    _$insert(_el$, _$createComponent(For, {\n      get each() {\n        return buttons();\n      },\n      children: button => {\n        if (button.separator) {\n          return _tmpl$2.cloneNode(true);\n        } else {\n          return _$createComponent(Button, {\n            get text() {\n              return button.text;\n            },\n            onClick: () => {\n              setVisible(false);\n              button.onClick();\n            }\n          });\n        }\n      }\n    }));\n    _$effect(_p$ => {\n      const _v$ = `fixed ${visible() ? \"display\" : \"hidden\"} w-48 bg-[#2B2A33] shadow-lg rounded border border-[#b5b5b5] py-1`,\n        _v$2 = `left: ${x()}px; top: ${y()}px;`;\n      _v$ !== _p$._v$ && _$className(_el$, _p$._v$ = _v$);\n      _p$._v$2 = _$style(_el$, _v$2, _p$._v$2);\n      return _p$;\n    }, {\n      _v$: undefined,\n      _v$2: undefined\n    });\n    return _el$;\n  })();\n}\n_$delegateEvents([\"contextmenu\", \"click\"]);",
      "start": 1677131500309,
      "end": 1677131500323
    }
  ],
  "virtual": false
}