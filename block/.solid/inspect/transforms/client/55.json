{
  "id": "C:/Users/issei/Velocity/src/components/Bookmarks.tsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { JSX, For, Show } from \"solid-js\";\r\nimport Bookmark from \"./Bookmark\";\r\nimport { bookmarks, setBookmarks } from \"~/data/appState\";\r\nimport BookmarkAPI from \"~/API/Bookmark\";\r\nimport ContextItem from \"~/API/ContextItem\";\r\nimport preferences from \"~/util/preferences\";\r\nimport { bookmarksShown, setBookmarksShown } from \"~/data/appState\";\r\nimport {\r\n  DragDropProvider,\r\n  DragDropSensors,\r\n  SortableProvider,\r\n  closestCenter,\r\n  createSortable\r\n} from \"@thisbeyond/solid-dnd\";\r\nimport ConstrainDragAxis from \"./ConstrainDragAxis\";\r\n\r\nexport default function Bookmarks(): JSX.Element {\r\n  // We have to use any on this because solid-dnd doesn't have proper typings\r\n  const onDragEnd = ({ draggable, droppable }: any) => {\r\n    draggable.node.classList.remove(\"z-20\");\r\n    if (draggable && droppable) {\r\n      const currentItems = bookmarks();\r\n      const fromIndex = currentItems.findIndex(\r\n        (bookmark: BookmarkAPI) => bookmark.id === draggable.id\r\n      );\r\n      const toIndex = currentItems.findIndex(\r\n        (bookmark: BookmarkAPI) => bookmark.id === droppable.id\r\n      );\r\n      if (fromIndex !== toIndex) {\r\n        const updatedItems = currentItems.slice();\r\n        updatedItems.splice(toIndex, 0, ...updatedItems.splice(fromIndex, 1));\r\n        setBookmarks(updatedItems);\r\n      }\r\n    }\r\n  };\r\n\r\n  // We have to use any on this because solid-dnd doesn't have proper typings\r\n  const onDragStart = ({ draggable }: any) =>\r\n    draggable.node.classList.add(\"z-20\");\r\n\r\n  return (\r\n    <Show when={bookmarksShown()}>\r\n      <div\r\n        class=\"flex items-center h-7 w-full bg-[#2B2A33] text-white text-[11px] px-2 gap-2\"\r\n        oncontextmenu={(event: MouseEvent & { data?: ContextItem[] }): void => {\r\n          if (!event.data) event.data = [];\r\n          event.data.push(\r\n            new ContextItem({\r\n              text: \"Hide bookmarks\",\r\n              onClick: () => {\r\n                setBookmarksShown(false);\r\n              }\r\n            })\r\n          );\r\n        }}\r\n      >\r\n        <DragDropProvider\r\n          onDragEnd={onDragEnd}\r\n          onDragStart={onDragStart}\r\n          collisionDetector={closestCenter}\r\n        >\r\n          <ConstrainDragAxis />\r\n          <DragDropSensors />\r\n          <SortableProvider ids={bookmarks().map((x) => x.id)}>\r\n            <For each={bookmarks()}>\r\n              {(bookmark: BookmarkAPI) => {\r\n                const sortable = createSortable(bookmark.id);\r\n                return <Bookmark sortable={sortable} bookmark={bookmark} />;\r\n              }}\r\n            </For>\r\n          </SortableProvider>\r\n        </DragDropProvider>\r\n      </div>\r\n    </Show>\r\n  );\r\n}\r\n",
      "start": 1677131499936,
      "end": 1677131500292
    },
    {
      "name": "solid",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { delegateEvents as _$delegateEvents } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<div class=\"flex items-center h-7 w-full bg-[#2B2A33] text-white text-[11px] px-2 gap-2\"></div>`, 2);\nimport { For, Show } from \"solid-js\";\nimport Bookmark from \"./Bookmark\";\nimport { bookmarks, setBookmarks } from \"~/data/appState\";\nimport ContextItem from \"~/API/ContextItem\";\nimport { bookmarksShown, setBookmarksShown } from \"~/data/appState\";\nimport { DragDropProvider, DragDropSensors, SortableProvider, closestCenter, createSortable } from \"@thisbeyond/solid-dnd\";\nimport ConstrainDragAxis from \"./ConstrainDragAxis\";\nexport default function Bookmarks() {\n  // We have to use any on this because solid-dnd doesn't have proper typings\n  const onDragEnd = ({\n    draggable,\n    droppable\n  }) => {\n    draggable.node.classList.remove(\"z-20\");\n    if (draggable && droppable) {\n      const currentItems = bookmarks();\n      const fromIndex = currentItems.findIndex(bookmark => bookmark.id === draggable.id);\n      const toIndex = currentItems.findIndex(bookmark => bookmark.id === droppable.id);\n      if (fromIndex !== toIndex) {\n        const updatedItems = currentItems.slice();\n        updatedItems.splice(toIndex, 0, ...updatedItems.splice(fromIndex, 1));\n        setBookmarks(updatedItems);\n      }\n    }\n  };\n\n  // We have to use any on this because solid-dnd doesn't have proper typings\n  const onDragStart = ({\n    draggable\n  }) => draggable.node.classList.add(\"z-20\");\n  return _$createComponent(Show, {\n    get when() {\n      return bookmarksShown();\n    },\n    get children() {\n      const _el$ = _tmpl$.cloneNode(true);\n      _el$.$$contextmenu = event => {\n        if (!event.data) event.data = [];\n        event.data.push(new ContextItem({\n          text: \"Hide bookmarks\",\n          onClick: () => {\n            setBookmarksShown(false);\n          }\n        }));\n      };\n      _$insert(_el$, _$createComponent(DragDropProvider, {\n        onDragEnd: onDragEnd,\n        onDragStart: onDragStart,\n        collisionDetector: closestCenter,\n        get children() {\n          return [_$createComponent(ConstrainDragAxis, {}), _$createComponent(DragDropSensors, {}), _$createComponent(SortableProvider, {\n            get ids() {\n              return bookmarks().map(x => x.id);\n            },\n            get children() {\n              return _$createComponent(For, {\n                get each() {\n                  return bookmarks();\n                },\n                children: bookmark => {\n                  const sortable = createSortable(bookmark.id);\n                  return _$createComponent(Bookmark, {\n                    sortable: sortable,\n                    bookmark: bookmark\n                  });\n                }\n              });\n            }\n          })];\n        }\n      }));\n      return _el$;\n    }\n  });\n}\n_$delegateEvents([\"contextmenu\"]);",
      "start": 1677131500292,
      "end": 1677131500304
    }
  ],
  "virtual": false
}