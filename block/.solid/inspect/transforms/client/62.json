{
  "id": "C:/Users/issei/Velocity/src/components/Tabs.tsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { JSX, onMount, For } from \"solid-js\";\r\nimport { tabs, setTabs, tabStack } from \"~/data/appState\";\r\nimport {\r\n  DragDropProvider,\r\n  DragDropSensors,\r\n  SortableProvider,\r\n  closestCenter,\r\n  createSortable\r\n} from \"@thisbeyond/solid-dnd\";\r\nimport Tab from \"../API/Tab\";\r\nimport preferences from \"~/util/preferences\";\r\nimport TabElement from \"~/components/Tab\";\r\nimport ConstrainDragAxis from \"./ConstrainDragAxis\";\r\n\r\nexport default function Header(): JSX.Element {\r\n  // We have to use any on this because solid-dnd doesn't have proper typings\r\n  const onDragEnd = ({ draggable, droppable }: any) => {\r\n    draggable.node.classList.remove(\"z-20\");\r\n    if (draggable && droppable) {\r\n      const currentItems = tabs();\r\n      const fromIndex = currentItems.findIndex(\r\n        (tab: Tab) => tab.id === draggable.id\r\n      );\r\n      const toIndex = currentItems.findIndex(\r\n        (tab: Tab) => tab.id === droppable.id\r\n      );\r\n      if (fromIndex !== toIndex) {\r\n        const updatedItems = currentItems.slice();\r\n        updatedItems.splice(toIndex, 0, ...updatedItems.splice(fromIndex, 1));\r\n        setTabs(updatedItems);\r\n      }\r\n    }\r\n  };\r\n\r\n  // We have to use any on this because solid-dnd doesn't have proper typings\r\n  const onDragStart = ({ draggable }: any) =>\r\n    draggable.node.classList.add(\"z-20\");\r\n\r\n  onMount(() => {\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const url = searchParams.get(\"url\");\r\n    const urls: string[] = JSON.parse(localStorage.getItem(\"tabs\") || \"[]\");\r\n\r\n    if (url) {\r\n      new Tab(url, true);\r\n      window.history.replaceState({}, document.title, \"/\");\r\n    } else if (\r\n      urls.length &&\r\n      preferences()[\"general.startup.openPreviousTabs\"]\r\n    ) {\r\n      const activeTab: number = parseInt(\r\n        localStorage.getItem(\"activeTab\") || \"0\"\r\n      );\r\n      urls.forEach((url: string): void => {\r\n        new Tab(url, false);\r\n      });\r\n      const focusTab = Array.from(tabStack())[activeTab];\r\n      if (focusTab) {\r\n        focusTab.focus = true;\r\n      }\r\n    } else {\r\n      new Tab(\"about:newTab\", true);\r\n    }\r\n  });\r\n\r\n  function makeTab() {\r\n    new Tab(\"about:newTab\", true);\r\n  }\r\n\r\n  return (\r\n    <div class=\"flex w-full bg-[#1C1B22]\">\r\n      <div class=\"flex w-full items-center h-11  px-[2px] cursor-default select-none gap-1\">\r\n        <DragDropProvider\r\n          onDragEnd={onDragEnd}\r\n          onDragStart={onDragStart}\r\n          collisionDetector={closestCenter}\r\n        >\r\n          <ConstrainDragAxis />\r\n          <DragDropSensors />\r\n          <SortableProvider ids={tabs().map((x) => x.id)}>\r\n            <For each={tabs()}>\r\n              {(tab: Tab): JSX.Element => {\r\n                const sortable = createSortable(tab.id);\r\n                return (\r\n                  // @ts-ignore\r\n                  // We have to ignore this because Typescript doesn't think this is valid syntax\r\n                  <TabElement sortable={sortable} tab={tab} />\r\n                );\r\n              }}\r\n            </For>\r\n          </SortableProvider>\r\n        </DragDropProvider>\r\n\r\n        <div class=\"flex items-center justify-center\">\r\n          <div\r\n            class=\"h-9 w-9 rounded hover:bg-[#52525E] text-white flex items-center justify-center\"\r\n            onClick={makeTab}\r\n          >\r\n            <i class=\"fa-regular fa-plus text-xs mt-[2px]\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "start": 1677131499936,
      "end": 1677131500271
    },
    {
      "name": "solid",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { delegateEvents as _$delegateEvents } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<div class=\"flex w-full bg-[#1C1B22]\"><div class=\"flex w-full items-center h-11  px-[2px] cursor-default select-none gap-1\"><div class=\"flex items-center justify-center\"><div class=\"h-9 w-9 rounded hover:bg-[#52525E] text-white flex items-center justify-center\"><i class=\"fa-regular fa-plus text-xs mt-[2px]\"></i></div></div></div></div>`, 10);\nimport { onMount, For } from \"solid-js\";\nimport { tabs, setTabs, tabStack } from \"~/data/appState\";\nimport { DragDropProvider, DragDropSensors, SortableProvider, closestCenter, createSortable } from \"@thisbeyond/solid-dnd\";\nimport Tab from \"../API/Tab\";\nimport preferences from \"~/util/preferences\";\nimport TabElement from \"~/components/Tab\";\nimport ConstrainDragAxis from \"./ConstrainDragAxis\";\nexport default function Header() {\n  // We have to use any on this because solid-dnd doesn't have proper typings\n  const onDragEnd = ({\n    draggable,\n    droppable\n  }) => {\n    draggable.node.classList.remove(\"z-20\");\n    if (draggable && droppable) {\n      const currentItems = tabs();\n      const fromIndex = currentItems.findIndex(tab => tab.id === draggable.id);\n      const toIndex = currentItems.findIndex(tab => tab.id === droppable.id);\n      if (fromIndex !== toIndex) {\n        const updatedItems = currentItems.slice();\n        updatedItems.splice(toIndex, 0, ...updatedItems.splice(fromIndex, 1));\n        setTabs(updatedItems);\n      }\n    }\n  };\n\n  // We have to use any on this because solid-dnd doesn't have proper typings\n  const onDragStart = ({\n    draggable\n  }) => draggable.node.classList.add(\"z-20\");\n  onMount(() => {\n    const searchParams = new URLSearchParams(window.location.search);\n    const url = searchParams.get(\"url\");\n    const urls = JSON.parse(localStorage.getItem(\"tabs\") || \"[]\");\n    if (url) {\n      new Tab(url, true);\n      window.history.replaceState({}, document.title, \"/\");\n    } else if (urls.length && preferences()[\"general.startup.openPreviousTabs\"]) {\n      const activeTab = parseInt(localStorage.getItem(\"activeTab\") || \"0\");\n      urls.forEach(url => {\n        new Tab(url, false);\n      });\n      const focusTab = Array.from(tabStack())[activeTab];\n      if (focusTab) {\n        focusTab.focus = true;\n      }\n    } else {\n      new Tab(\"about:newTab\", true);\n    }\n  });\n  function makeTab() {\n    new Tab(\"about:newTab\", true);\n  }\n  return (() => {\n    const _el$ = _tmpl$.cloneNode(true),\n      _el$2 = _el$.firstChild,\n      _el$3 = _el$2.firstChild,\n      _el$4 = _el$3.firstChild;\n    _$insert(_el$2, _$createComponent(DragDropProvider, {\n      onDragEnd: onDragEnd,\n      onDragStart: onDragStart,\n      collisionDetector: closestCenter,\n      get children() {\n        return [_$createComponent(ConstrainDragAxis, {}), _$createComponent(DragDropSensors, {}), _$createComponent(SortableProvider, {\n          get ids() {\n            return tabs().map(x => x.id);\n          },\n          get children() {\n            return _$createComponent(For, {\n              get each() {\n                return tabs();\n              },\n              children: tab => {\n                const sortable = createSortable(tab.id);\n                return (// @ts-ignore\n                  // We have to ignore this because Typescript doesn't think this is valid syntax\n                  _$createComponent(TabElement, {\n                    sortable: sortable,\n                    tab: tab\n                  })\n                );\n              }\n            });\n          }\n        })];\n      }\n    }), _el$3);\n    _el$4.$$click = makeTab;\n    return _el$;\n  })();\n}\n_$delegateEvents([\"click\"]);",
      "start": 1677131500271,
      "end": 1677131500284
    }
  ],
  "virtual": false
}